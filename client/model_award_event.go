/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AwardEvent struct for AwardEvent
type AwardEvent struct {
	EventTitle NullableString `json:"eventTitle,omitempty"`
	EventYear NullableString `json:"eventYear,omitempty"`
	OutcomeItems []AwardOutcome `json:"outcomeItems,omitempty"`
}

// NewAwardEvent instantiates a new AwardEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardEvent() *AwardEvent {
	this := AwardEvent{}
	return &this
}

// NewAwardEventWithDefaults instantiates a new AwardEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardEventWithDefaults() *AwardEvent {
	this := AwardEvent{}
	return &this
}

// GetEventTitle returns the EventTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardEvent) GetEventTitle() string {
	if o == nil || o.EventTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.EventTitle.Get()
}

// GetEventTitleOk returns a tuple with the EventTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardEvent) GetEventTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTitle.Get(), o.EventTitle.IsSet()
}

// HasEventTitle returns a boolean if a field has been set.
func (o *AwardEvent) HasEventTitle() bool {
	if o != nil && o.EventTitle.IsSet() {
		return true
	}

	return false
}

// SetEventTitle gets a reference to the given NullableString and assigns it to the EventTitle field.
func (o *AwardEvent) SetEventTitle(v string) {
	o.EventTitle.Set(&v)
}
// SetEventTitleNil sets the value for EventTitle to be an explicit nil
func (o *AwardEvent) SetEventTitleNil() {
	o.EventTitle.Set(nil)
}

// UnsetEventTitle ensures that no value is present for EventTitle, not even an explicit nil
func (o *AwardEvent) UnsetEventTitle() {
	o.EventTitle.Unset()
}

// GetEventYear returns the EventYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardEvent) GetEventYear() string {
	if o == nil || o.EventYear.Get() == nil {
		var ret string
		return ret
	}
	return *o.EventYear.Get()
}

// GetEventYearOk returns a tuple with the EventYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardEvent) GetEventYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventYear.Get(), o.EventYear.IsSet()
}

// HasEventYear returns a boolean if a field has been set.
func (o *AwardEvent) HasEventYear() bool {
	if o != nil && o.EventYear.IsSet() {
		return true
	}

	return false
}

// SetEventYear gets a reference to the given NullableString and assigns it to the EventYear field.
func (o *AwardEvent) SetEventYear(v string) {
	o.EventYear.Set(&v)
}
// SetEventYearNil sets the value for EventYear to be an explicit nil
func (o *AwardEvent) SetEventYearNil() {
	o.EventYear.Set(nil)
}

// UnsetEventYear ensures that no value is present for EventYear, not even an explicit nil
func (o *AwardEvent) UnsetEventYear() {
	o.EventYear.Unset()
}

// GetOutcomeItems returns the OutcomeItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardEvent) GetOutcomeItems() []AwardOutcome {
	if o == nil {
		var ret []AwardOutcome
		return ret
	}
	return o.OutcomeItems
}

// GetOutcomeItemsOk returns a tuple with the OutcomeItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardEvent) GetOutcomeItemsOk() ([]AwardOutcome, bool) {
	if o == nil || o.OutcomeItems == nil {
		return nil, false
	}
	return o.OutcomeItems, true
}

// HasOutcomeItems returns a boolean if a field has been set.
func (o *AwardEvent) HasOutcomeItems() bool {
	if o != nil && o.OutcomeItems != nil {
		return true
	}

	return false
}

// SetOutcomeItems gets a reference to the given []AwardOutcome and assigns it to the OutcomeItems field.
func (o *AwardEvent) SetOutcomeItems(v []AwardOutcome) {
	o.OutcomeItems = v
}

func (o AwardEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTitle.IsSet() {
		toSerialize["eventTitle"] = o.EventTitle.Get()
	}
	if o.EventYear.IsSet() {
		toSerialize["eventYear"] = o.EventYear.Get()
	}
	if o.OutcomeItems != nil {
		toSerialize["outcomeItems"] = o.OutcomeItems
	}
	return json.Marshal(toSerialize)
}

type NullableAwardEvent struct {
	value *AwardEvent
	isSet bool
}

func (v NullableAwardEvent) Get() *AwardEvent {
	return v.value
}

func (v *NullableAwardEvent) Set(val *AwardEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardEvent(val *AwardEvent) *NullableAwardEvent {
	return &NullableAwardEvent{value: val, isSet: true}
}

func (v NullableAwardEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


