/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AwardOutcome struct for AwardOutcome
type AwardOutcome struct {
	OutcomeTitle NullableString `json:"outcomeTitle,omitempty"`
	OutcomeCategory NullableString `json:"outcomeCategory,omitempty"`
	OutcomeDetails []AwardOutcomeDetail `json:"outcomeDetails,omitempty"`
}

// NewAwardOutcome instantiates a new AwardOutcome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardOutcome() *AwardOutcome {
	this := AwardOutcome{}
	return &this
}

// NewAwardOutcomeWithDefaults instantiates a new AwardOutcome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardOutcomeWithDefaults() *AwardOutcome {
	this := AwardOutcome{}
	return &this
}

// GetOutcomeTitle returns the OutcomeTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardOutcome) GetOutcomeTitle() string {
	if o == nil || o.OutcomeTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.OutcomeTitle.Get()
}

// GetOutcomeTitleOk returns a tuple with the OutcomeTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardOutcome) GetOutcomeTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutcomeTitle.Get(), o.OutcomeTitle.IsSet()
}

// HasOutcomeTitle returns a boolean if a field has been set.
func (o *AwardOutcome) HasOutcomeTitle() bool {
	if o != nil && o.OutcomeTitle.IsSet() {
		return true
	}

	return false
}

// SetOutcomeTitle gets a reference to the given NullableString and assigns it to the OutcomeTitle field.
func (o *AwardOutcome) SetOutcomeTitle(v string) {
	o.OutcomeTitle.Set(&v)
}
// SetOutcomeTitleNil sets the value for OutcomeTitle to be an explicit nil
func (o *AwardOutcome) SetOutcomeTitleNil() {
	o.OutcomeTitle.Set(nil)
}

// UnsetOutcomeTitle ensures that no value is present for OutcomeTitle, not even an explicit nil
func (o *AwardOutcome) UnsetOutcomeTitle() {
	o.OutcomeTitle.Unset()
}

// GetOutcomeCategory returns the OutcomeCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardOutcome) GetOutcomeCategory() string {
	if o == nil || o.OutcomeCategory.Get() == nil {
		var ret string
		return ret
	}
	return *o.OutcomeCategory.Get()
}

// GetOutcomeCategoryOk returns a tuple with the OutcomeCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardOutcome) GetOutcomeCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutcomeCategory.Get(), o.OutcomeCategory.IsSet()
}

// HasOutcomeCategory returns a boolean if a field has been set.
func (o *AwardOutcome) HasOutcomeCategory() bool {
	if o != nil && o.OutcomeCategory.IsSet() {
		return true
	}

	return false
}

// SetOutcomeCategory gets a reference to the given NullableString and assigns it to the OutcomeCategory field.
func (o *AwardOutcome) SetOutcomeCategory(v string) {
	o.OutcomeCategory.Set(&v)
}
// SetOutcomeCategoryNil sets the value for OutcomeCategory to be an explicit nil
func (o *AwardOutcome) SetOutcomeCategoryNil() {
	o.OutcomeCategory.Set(nil)
}

// UnsetOutcomeCategory ensures that no value is present for OutcomeCategory, not even an explicit nil
func (o *AwardOutcome) UnsetOutcomeCategory() {
	o.OutcomeCategory.Unset()
}

// GetOutcomeDetails returns the OutcomeDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardOutcome) GetOutcomeDetails() []AwardOutcomeDetail {
	if o == nil {
		var ret []AwardOutcomeDetail
		return ret
	}
	return o.OutcomeDetails
}

// GetOutcomeDetailsOk returns a tuple with the OutcomeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardOutcome) GetOutcomeDetailsOk() ([]AwardOutcomeDetail, bool) {
	if o == nil || o.OutcomeDetails == nil {
		return nil, false
	}
	return o.OutcomeDetails, true
}

// HasOutcomeDetails returns a boolean if a field has been set.
func (o *AwardOutcome) HasOutcomeDetails() bool {
	if o != nil && o.OutcomeDetails != nil {
		return true
	}

	return false
}

// SetOutcomeDetails gets a reference to the given []AwardOutcomeDetail and assigns it to the OutcomeDetails field.
func (o *AwardOutcome) SetOutcomeDetails(v []AwardOutcomeDetail) {
	o.OutcomeDetails = v
}

func (o AwardOutcome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OutcomeTitle.IsSet() {
		toSerialize["outcomeTitle"] = o.OutcomeTitle.Get()
	}
	if o.OutcomeCategory.IsSet() {
		toSerialize["outcomeCategory"] = o.OutcomeCategory.Get()
	}
	if o.OutcomeDetails != nil {
		toSerialize["outcomeDetails"] = o.OutcomeDetails
	}
	return json.Marshal(toSerialize)
}

type NullableAwardOutcome struct {
	value *AwardOutcome
	isSet bool
}

func (v NullableAwardOutcome) Get() *AwardOutcome {
	return v.value
}

func (v *NullableAwardOutcome) Set(val *AwardOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardOutcome(val *AwardOutcome) *NullableAwardOutcome {
	return &NullableAwardOutcome{value: val, isSet: true}
}

func (v NullableAwardOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


