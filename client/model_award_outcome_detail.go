/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AwardOutcomeDetail struct for AwardOutcomeDetail
type AwardOutcomeDetail struct {
	PlainText NullableString `json:"plainText,omitempty"`
	Html NullableString `json:"html,omitempty"`
}

// NewAwardOutcomeDetail instantiates a new AwardOutcomeDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardOutcomeDetail() *AwardOutcomeDetail {
	this := AwardOutcomeDetail{}
	return &this
}

// NewAwardOutcomeDetailWithDefaults instantiates a new AwardOutcomeDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardOutcomeDetailWithDefaults() *AwardOutcomeDetail {
	this := AwardOutcomeDetail{}
	return &this
}

// GetPlainText returns the PlainText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardOutcomeDetail) GetPlainText() string {
	if o == nil || o.PlainText.Get() == nil {
		var ret string
		return ret
	}
	return *o.PlainText.Get()
}

// GetPlainTextOk returns a tuple with the PlainText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardOutcomeDetail) GetPlainTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlainText.Get(), o.PlainText.IsSet()
}

// HasPlainText returns a boolean if a field has been set.
func (o *AwardOutcomeDetail) HasPlainText() bool {
	if o != nil && o.PlainText.IsSet() {
		return true
	}

	return false
}

// SetPlainText gets a reference to the given NullableString and assigns it to the PlainText field.
func (o *AwardOutcomeDetail) SetPlainText(v string) {
	o.PlainText.Set(&v)
}
// SetPlainTextNil sets the value for PlainText to be an explicit nil
func (o *AwardOutcomeDetail) SetPlainTextNil() {
	o.PlainText.Set(nil)
}

// UnsetPlainText ensures that no value is present for PlainText, not even an explicit nil
func (o *AwardOutcomeDetail) UnsetPlainText() {
	o.PlainText.Unset()
}

// GetHtml returns the Html field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwardOutcomeDetail) GetHtml() string {
	if o == nil || o.Html.Get() == nil {
		var ret string
		return ret
	}
	return *o.Html.Get()
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwardOutcomeDetail) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Html.Get(), o.Html.IsSet()
}

// HasHtml returns a boolean if a field has been set.
func (o *AwardOutcomeDetail) HasHtml() bool {
	if o != nil && o.Html.IsSet() {
		return true
	}

	return false
}

// SetHtml gets a reference to the given NullableString and assigns it to the Html field.
func (o *AwardOutcomeDetail) SetHtml(v string) {
	o.Html.Set(&v)
}
// SetHtmlNil sets the value for Html to be an explicit nil
func (o *AwardOutcomeDetail) SetHtmlNil() {
	o.Html.Set(nil)
}

// UnsetHtml ensures that no value is present for Html, not even an explicit nil
func (o *AwardOutcomeDetail) UnsetHtml() {
	o.Html.Unset()
}

func (o AwardOutcomeDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PlainText.IsSet() {
		toSerialize["plainText"] = o.PlainText.Get()
	}
	if o.Html.IsSet() {
		toSerialize["html"] = o.Html.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAwardOutcomeDetail struct {
	value *AwardOutcomeDetail
	isSet bool
}

func (v NullableAwardOutcomeDetail) Get() *AwardOutcomeDetail {
	return v.value
}

func (v *NullableAwardOutcomeDetail) Set(val *AwardOutcomeDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardOutcomeDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardOutcomeDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardOutcomeDetail(val *AwardOutcomeDetail) *NullableAwardOutcomeDetail {
	return &NullableAwardOutcomeDetail{value: val, isSet: true}
}

func (v NullableAwardOutcomeDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardOutcomeDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


