/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// FAQDetail struct for FAQDetail
type FAQDetail struct {
	Question NullableString `json:"question,omitempty"`
	Answer NullableString `json:"answer,omitempty"`
}

// NewFAQDetail instantiates a new FAQDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFAQDetail() *FAQDetail {
	this := FAQDetail{}
	return &this
}

// NewFAQDetailWithDefaults instantiates a new FAQDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFAQDetailWithDefaults() *FAQDetail {
	this := FAQDetail{}
	return &this
}

// GetQuestion returns the Question field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FAQDetail) GetQuestion() string {
	if o == nil || o.Question.Get() == nil {
		var ret string
		return ret
	}
	return *o.Question.Get()
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FAQDetail) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Question.Get(), o.Question.IsSet()
}

// HasQuestion returns a boolean if a field has been set.
func (o *FAQDetail) HasQuestion() bool {
	if o != nil && o.Question.IsSet() {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given NullableString and assigns it to the Question field.
func (o *FAQDetail) SetQuestion(v string) {
	o.Question.Set(&v)
}
// SetQuestionNil sets the value for Question to be an explicit nil
func (o *FAQDetail) SetQuestionNil() {
	o.Question.Set(nil)
}

// UnsetQuestion ensures that no value is present for Question, not even an explicit nil
func (o *FAQDetail) UnsetQuestion() {
	o.Question.Unset()
}

// GetAnswer returns the Answer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FAQDetail) GetAnswer() string {
	if o == nil || o.Answer.Get() == nil {
		var ret string
		return ret
	}
	return *o.Answer.Get()
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FAQDetail) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Answer.Get(), o.Answer.IsSet()
}

// HasAnswer returns a boolean if a field has been set.
func (o *FAQDetail) HasAnswer() bool {
	if o != nil && o.Answer.IsSet() {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given NullableString and assigns it to the Answer field.
func (o *FAQDetail) SetAnswer(v string) {
	o.Answer.Set(&v)
}
// SetAnswerNil sets the value for Answer to be an explicit nil
func (o *FAQDetail) SetAnswerNil() {
	o.Answer.Set(nil)
}

// UnsetAnswer ensures that no value is present for Answer, not even an explicit nil
func (o *FAQDetail) UnsetAnswer() {
	o.Answer.Unset()
}

func (o FAQDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Question.IsSet() {
		toSerialize["question"] = o.Question.Get()
	}
	if o.Answer.IsSet() {
		toSerialize["answer"] = o.Answer.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFAQDetail struct {
	value *FAQDetail
	isSet bool
}

func (v NullableFAQDetail) Get() *FAQDetail {
	return v.value
}

func (v *NullableFAQDetail) Set(val *FAQDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableFAQDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableFAQDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFAQDetail(val *FAQDetail) *NullableFAQDetail {
	return &NullableFAQDetail{value: val, isSet: true}
}

func (v NullableFAQDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFAQDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


