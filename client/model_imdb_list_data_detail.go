/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IMDbListDataDetail struct for IMDbListDataDetail
type IMDbListDataDetail struct {
	Id NullableString `json:"id,omitempty"`
	Index NullableString `json:"index,omitempty"`
	Title NullableString `json:"title,omitempty"`
	FullTitle NullableString `json:"fullTitle,omitempty"`
	Year NullableString `json:"year,omitempty"`
	Image NullableString `json:"image,omitempty"`
	ImDbRating NullableString `json:"imDbRating,omitempty"`
	ImDbRatingCount NullableString `json:"imDbRatingCount,omitempty"`
	Description NullableString `json:"description,omitempty"`
}

// NewIMDbListDataDetail instantiates a new IMDbListDataDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIMDbListDataDetail() *IMDbListDataDetail {
	this := IMDbListDataDetail{}
	return &this
}

// NewIMDbListDataDetailWithDefaults instantiates a new IMDbListDataDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIMDbListDataDetailWithDefaults() *IMDbListDataDetail {
	this := IMDbListDataDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *IMDbListDataDetail) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *IMDbListDataDetail) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *IMDbListDataDetail) UnsetId() {
	o.Id.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetIndex() string {
	if o == nil || o.Index.Get() == nil {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *IMDbListDataDetail) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *IMDbListDataDetail) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *IMDbListDataDetail) UnsetIndex() {
	o.Index.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *IMDbListDataDetail) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *IMDbListDataDetail) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *IMDbListDataDetail) UnsetTitle() {
	o.Title.Unset()
}

// GetFullTitle returns the FullTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetFullTitle() string {
	if o == nil || o.FullTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullTitle.Get()
}

// GetFullTitleOk returns a tuple with the FullTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetFullTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTitle.Get(), o.FullTitle.IsSet()
}

// HasFullTitle returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasFullTitle() bool {
	if o != nil && o.FullTitle.IsSet() {
		return true
	}

	return false
}

// SetFullTitle gets a reference to the given NullableString and assigns it to the FullTitle field.
func (o *IMDbListDataDetail) SetFullTitle(v string) {
	o.FullTitle.Set(&v)
}
// SetFullTitleNil sets the value for FullTitle to be an explicit nil
func (o *IMDbListDataDetail) SetFullTitleNil() {
	o.FullTitle.Set(nil)
}

// UnsetFullTitle ensures that no value is present for FullTitle, not even an explicit nil
func (o *IMDbListDataDetail) UnsetFullTitle() {
	o.FullTitle.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetYear() string {
	if o == nil || o.Year.Get() == nil {
		var ret string
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableString and assigns it to the Year field.
func (o *IMDbListDataDetail) SetYear(v string) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *IMDbListDataDetail) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *IMDbListDataDetail) UnsetYear() {
	o.Year.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetImage() string {
	if o == nil || o.Image.Get() == nil {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *IMDbListDataDetail) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *IMDbListDataDetail) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *IMDbListDataDetail) UnsetImage() {
	o.Image.Unset()
}

// GetImDbRating returns the ImDbRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetImDbRating() string {
	if o == nil || o.ImDbRating.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbRating.Get()
}

// GetImDbRatingOk returns a tuple with the ImDbRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetImDbRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbRating.Get(), o.ImDbRating.IsSet()
}

// HasImDbRating returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasImDbRating() bool {
	if o != nil && o.ImDbRating.IsSet() {
		return true
	}

	return false
}

// SetImDbRating gets a reference to the given NullableString and assigns it to the ImDbRating field.
func (o *IMDbListDataDetail) SetImDbRating(v string) {
	o.ImDbRating.Set(&v)
}
// SetImDbRatingNil sets the value for ImDbRating to be an explicit nil
func (o *IMDbListDataDetail) SetImDbRatingNil() {
	o.ImDbRating.Set(nil)
}

// UnsetImDbRating ensures that no value is present for ImDbRating, not even an explicit nil
func (o *IMDbListDataDetail) UnsetImDbRating() {
	o.ImDbRating.Unset()
}

// GetImDbRatingCount returns the ImDbRatingCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetImDbRatingCount() string {
	if o == nil || o.ImDbRatingCount.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbRatingCount.Get()
}

// GetImDbRatingCountOk returns a tuple with the ImDbRatingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetImDbRatingCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbRatingCount.Get(), o.ImDbRatingCount.IsSet()
}

// HasImDbRatingCount returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasImDbRatingCount() bool {
	if o != nil && o.ImDbRatingCount.IsSet() {
		return true
	}

	return false
}

// SetImDbRatingCount gets a reference to the given NullableString and assigns it to the ImDbRatingCount field.
func (o *IMDbListDataDetail) SetImDbRatingCount(v string) {
	o.ImDbRatingCount.Set(&v)
}
// SetImDbRatingCountNil sets the value for ImDbRatingCount to be an explicit nil
func (o *IMDbListDataDetail) SetImDbRatingCountNil() {
	o.ImDbRatingCount.Set(nil)
}

// UnsetImDbRatingCount ensures that no value is present for ImDbRatingCount, not even an explicit nil
func (o *IMDbListDataDetail) UnsetImDbRatingCount() {
	o.ImDbRatingCount.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IMDbListDataDetail) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IMDbListDataDetail) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IMDbListDataDetail) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IMDbListDataDetail) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IMDbListDataDetail) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IMDbListDataDetail) UnsetDescription() {
	o.Description.Unset()
}

func (o IMDbListDataDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.FullTitle.IsSet() {
		toSerialize["fullTitle"] = o.FullTitle.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.ImDbRating.IsSet() {
		toSerialize["imDbRating"] = o.ImDbRating.Get()
	}
	if o.ImDbRatingCount.IsSet() {
		toSerialize["imDbRatingCount"] = o.ImDbRatingCount.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIMDbListDataDetail struct {
	value *IMDbListDataDetail
	isSet bool
}

func (v NullableIMDbListDataDetail) Get() *IMDbListDataDetail {
	return v.value
}

func (v *NullableIMDbListDataDetail) Set(val *IMDbListDataDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableIMDbListDataDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableIMDbListDataDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIMDbListDataDetail(val *IMDbListDataDetail) *NullableIMDbListDataDetail {
	return &NullableIMDbListDataDetail{value: val, isSet: true}
}

func (v NullableIMDbListDataDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIMDbListDataDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


