/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NameAwardData struct for NameAwardData
type NameAwardData struct {
	ImDbId NullableString `json:"imDbId,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Items []NameAwardEvent `json:"items,omitempty"`
	NameAwardsHtml NullableString `json:"nameAwardsHtml,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewNameAwardData instantiates a new NameAwardData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameAwardData() *NameAwardData {
	this := NameAwardData{}
	return &this
}

// NewNameAwardDataWithDefaults instantiates a new NameAwardData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameAwardDataWithDefaults() *NameAwardData {
	this := NameAwardData{}
	return &this
}

// GetImDbId returns the ImDbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardData) GetImDbId() string {
	if o == nil || o.ImDbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbId.Get()
}

// GetImDbIdOk returns a tuple with the ImDbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardData) GetImDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbId.Get(), o.ImDbId.IsSet()
}

// HasImDbId returns a boolean if a field has been set.
func (o *NameAwardData) HasImDbId() bool {
	if o != nil && o.ImDbId.IsSet() {
		return true
	}

	return false
}

// SetImDbId gets a reference to the given NullableString and assigns it to the ImDbId field.
func (o *NameAwardData) SetImDbId(v string) {
	o.ImDbId.Set(&v)
}
// SetImDbIdNil sets the value for ImDbId to be an explicit nil
func (o *NameAwardData) SetImDbIdNil() {
	o.ImDbId.Set(nil)
}

// UnsetImDbId ensures that no value is present for ImDbId, not even an explicit nil
func (o *NameAwardData) UnsetImDbId() {
	o.ImDbId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardData) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NameAwardData) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NameAwardData) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NameAwardData) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NameAwardData) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardData) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *NameAwardData) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *NameAwardData) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *NameAwardData) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *NameAwardData) UnsetDescription() {
	o.Description.Unset()
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardData) GetItems() []NameAwardEvent {
	if o == nil {
		var ret []NameAwardEvent
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardData) GetItemsOk() ([]NameAwardEvent, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *NameAwardData) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []NameAwardEvent and assigns it to the Items field.
func (o *NameAwardData) SetItems(v []NameAwardEvent) {
	o.Items = v
}

// GetNameAwardsHtml returns the NameAwardsHtml field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardData) GetNameAwardsHtml() string {
	if o == nil || o.NameAwardsHtml.Get() == nil {
		var ret string
		return ret
	}
	return *o.NameAwardsHtml.Get()
}

// GetNameAwardsHtmlOk returns a tuple with the NameAwardsHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardData) GetNameAwardsHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameAwardsHtml.Get(), o.NameAwardsHtml.IsSet()
}

// HasNameAwardsHtml returns a boolean if a field has been set.
func (o *NameAwardData) HasNameAwardsHtml() bool {
	if o != nil && o.NameAwardsHtml.IsSet() {
		return true
	}

	return false
}

// SetNameAwardsHtml gets a reference to the given NullableString and assigns it to the NameAwardsHtml field.
func (o *NameAwardData) SetNameAwardsHtml(v string) {
	o.NameAwardsHtml.Set(&v)
}
// SetNameAwardsHtmlNil sets the value for NameAwardsHtml to be an explicit nil
func (o *NameAwardData) SetNameAwardsHtmlNil() {
	o.NameAwardsHtml.Set(nil)
}

// UnsetNameAwardsHtml ensures that no value is present for NameAwardsHtml, not even an explicit nil
func (o *NameAwardData) UnsetNameAwardsHtml() {
	o.NameAwardsHtml.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *NameAwardData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *NameAwardData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *NameAwardData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *NameAwardData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o NameAwardData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImDbId.IsSet() {
		toSerialize["imDbId"] = o.ImDbId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.NameAwardsHtml.IsSet() {
		toSerialize["nameAwardsHtml"] = o.NameAwardsHtml.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNameAwardData struct {
	value *NameAwardData
	isSet bool
}

func (v NullableNameAwardData) Get() *NameAwardData {
	return v.value
}

func (v *NullableNameAwardData) Set(val *NameAwardData) {
	v.value = val
	v.isSet = true
}

func (v NullableNameAwardData) IsSet() bool {
	return v.isSet
}

func (v *NullableNameAwardData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameAwardData(val *NameAwardData) *NullableNameAwardData {
	return &NullableNameAwardData{value: val, isSet: true}
}

func (v NullableNameAwardData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameAwardData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


