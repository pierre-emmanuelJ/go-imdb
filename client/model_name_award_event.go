/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NameAwardEvent struct for NameAwardEvent
type NameAwardEvent struct {
	EventTitle NullableString `json:"eventTitle,omitempty"`
	OutcomeItems []NameAwardOutcome `json:"outcomeItems,omitempty"`
}

// NewNameAwardEvent instantiates a new NameAwardEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameAwardEvent() *NameAwardEvent {
	this := NameAwardEvent{}
	return &this
}

// NewNameAwardEventWithDefaults instantiates a new NameAwardEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameAwardEventWithDefaults() *NameAwardEvent {
	this := NameAwardEvent{}
	return &this
}

// GetEventTitle returns the EventTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardEvent) GetEventTitle() string {
	if o == nil || o.EventTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.EventTitle.Get()
}

// GetEventTitleOk returns a tuple with the EventTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardEvent) GetEventTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTitle.Get(), o.EventTitle.IsSet()
}

// HasEventTitle returns a boolean if a field has been set.
func (o *NameAwardEvent) HasEventTitle() bool {
	if o != nil && o.EventTitle.IsSet() {
		return true
	}

	return false
}

// SetEventTitle gets a reference to the given NullableString and assigns it to the EventTitle field.
func (o *NameAwardEvent) SetEventTitle(v string) {
	o.EventTitle.Set(&v)
}
// SetEventTitleNil sets the value for EventTitle to be an explicit nil
func (o *NameAwardEvent) SetEventTitleNil() {
	o.EventTitle.Set(nil)
}

// UnsetEventTitle ensures that no value is present for EventTitle, not even an explicit nil
func (o *NameAwardEvent) UnsetEventTitle() {
	o.EventTitle.Unset()
}

// GetOutcomeItems returns the OutcomeItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameAwardEvent) GetOutcomeItems() []NameAwardOutcome {
	if o == nil {
		var ret []NameAwardOutcome
		return ret
	}
	return o.OutcomeItems
}

// GetOutcomeItemsOk returns a tuple with the OutcomeItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameAwardEvent) GetOutcomeItemsOk() ([]NameAwardOutcome, bool) {
	if o == nil || o.OutcomeItems == nil {
		return nil, false
	}
	return o.OutcomeItems, true
}

// HasOutcomeItems returns a boolean if a field has been set.
func (o *NameAwardEvent) HasOutcomeItems() bool {
	if o != nil && o.OutcomeItems != nil {
		return true
	}

	return false
}

// SetOutcomeItems gets a reference to the given []NameAwardOutcome and assigns it to the OutcomeItems field.
func (o *NameAwardEvent) SetOutcomeItems(v []NameAwardOutcome) {
	o.OutcomeItems = v
}

func (o NameAwardEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTitle.IsSet() {
		toSerialize["eventTitle"] = o.EventTitle.Get()
	}
	if o.OutcomeItems != nil {
		toSerialize["outcomeItems"] = o.OutcomeItems
	}
	return json.Marshal(toSerialize)
}

type NullableNameAwardEvent struct {
	value *NameAwardEvent
	isSet bool
}

func (v NullableNameAwardEvent) Get() *NameAwardEvent {
	return v.value
}

func (v *NullableNameAwardEvent) Set(val *NameAwardEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableNameAwardEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableNameAwardEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameAwardEvent(val *NameAwardEvent) *NullableNameAwardEvent {
	return &NullableNameAwardEvent{value: val, isSet: true}
}

func (v NullableNameAwardEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameAwardEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


