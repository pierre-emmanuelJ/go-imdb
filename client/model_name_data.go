/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NameData struct for NameData
type NameData struct {
	Id NullableString `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Role NullableString `json:"role,omitempty"`
	Image NullableString `json:"image,omitempty"`
	Summary NullableString `json:"summary,omitempty"`
	BirthDate NullableString `json:"birthDate,omitempty"`
	DeathDate NullableString `json:"deathDate,omitempty"`
	Awards NullableString `json:"awards,omitempty"`
	Height NullableString `json:"height,omitempty"`
	KnownFor []KnownFor `json:"knownFor,omitempty"`
	CastMovies []CastMovie `json:"castMovies,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewNameData instantiates a new NameData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameData() *NameData {
	this := NameData{}
	return &this
}

// NewNameDataWithDefaults instantiates a new NameData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameDataWithDefaults() *NameData {
	this := NameData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NameData) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *NameData) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NameData) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NameData) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NameData) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NameData) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NameData) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NameData) UnsetName() {
	o.Name.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetRole() string {
	if o == nil || o.Role.Get() == nil {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *NameData) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *NameData) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *NameData) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *NameData) UnsetRole() {
	o.Role.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetImage() string {
	if o == nil || o.Image.Get() == nil {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *NameData) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *NameData) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *NameData) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *NameData) UnsetImage() {
	o.Image.Unset()
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetSummary() string {
	if o == nil || o.Summary.Get() == nil {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *NameData) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableString and assigns it to the Summary field.
func (o *NameData) SetSummary(v string) {
	o.Summary.Set(&v)
}
// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *NameData) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *NameData) UnsetSummary() {
	o.Summary.Unset()
}

// GetBirthDate returns the BirthDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetBirthDate() string {
	if o == nil || o.BirthDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.BirthDate.Get()
}

// GetBirthDateOk returns a tuple with the BirthDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetBirthDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BirthDate.Get(), o.BirthDate.IsSet()
}

// HasBirthDate returns a boolean if a field has been set.
func (o *NameData) HasBirthDate() bool {
	if o != nil && o.BirthDate.IsSet() {
		return true
	}

	return false
}

// SetBirthDate gets a reference to the given NullableString and assigns it to the BirthDate field.
func (o *NameData) SetBirthDate(v string) {
	o.BirthDate.Set(&v)
}
// SetBirthDateNil sets the value for BirthDate to be an explicit nil
func (o *NameData) SetBirthDateNil() {
	o.BirthDate.Set(nil)
}

// UnsetBirthDate ensures that no value is present for BirthDate, not even an explicit nil
func (o *NameData) UnsetBirthDate() {
	o.BirthDate.Unset()
}

// GetDeathDate returns the DeathDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetDeathDate() string {
	if o == nil || o.DeathDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeathDate.Get()
}

// GetDeathDateOk returns a tuple with the DeathDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetDeathDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeathDate.Get(), o.DeathDate.IsSet()
}

// HasDeathDate returns a boolean if a field has been set.
func (o *NameData) HasDeathDate() bool {
	if o != nil && o.DeathDate.IsSet() {
		return true
	}

	return false
}

// SetDeathDate gets a reference to the given NullableString and assigns it to the DeathDate field.
func (o *NameData) SetDeathDate(v string) {
	o.DeathDate.Set(&v)
}
// SetDeathDateNil sets the value for DeathDate to be an explicit nil
func (o *NameData) SetDeathDateNil() {
	o.DeathDate.Set(nil)
}

// UnsetDeathDate ensures that no value is present for DeathDate, not even an explicit nil
func (o *NameData) UnsetDeathDate() {
	o.DeathDate.Unset()
}

// GetAwards returns the Awards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetAwards() string {
	if o == nil || o.Awards.Get() == nil {
		var ret string
		return ret
	}
	return *o.Awards.Get()
}

// GetAwardsOk returns a tuple with the Awards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetAwardsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Awards.Get(), o.Awards.IsSet()
}

// HasAwards returns a boolean if a field has been set.
func (o *NameData) HasAwards() bool {
	if o != nil && o.Awards.IsSet() {
		return true
	}

	return false
}

// SetAwards gets a reference to the given NullableString and assigns it to the Awards field.
func (o *NameData) SetAwards(v string) {
	o.Awards.Set(&v)
}
// SetAwardsNil sets the value for Awards to be an explicit nil
func (o *NameData) SetAwardsNil() {
	o.Awards.Set(nil)
}

// UnsetAwards ensures that no value is present for Awards, not even an explicit nil
func (o *NameData) UnsetAwards() {
	o.Awards.Unset()
}

// GetHeight returns the Height field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetHeight() string {
	if o == nil || o.Height.Get() == nil {
		var ret string
		return ret
	}
	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// HasHeight returns a boolean if a field has been set.
func (o *NameData) HasHeight() bool {
	if o != nil && o.Height.IsSet() {
		return true
	}

	return false
}

// SetHeight gets a reference to the given NullableString and assigns it to the Height field.
func (o *NameData) SetHeight(v string) {
	o.Height.Set(&v)
}
// SetHeightNil sets the value for Height to be an explicit nil
func (o *NameData) SetHeightNil() {
	o.Height.Set(nil)
}

// UnsetHeight ensures that no value is present for Height, not even an explicit nil
func (o *NameData) UnsetHeight() {
	o.Height.Unset()
}

// GetKnownFor returns the KnownFor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetKnownFor() []KnownFor {
	if o == nil {
		var ret []KnownFor
		return ret
	}
	return o.KnownFor
}

// GetKnownForOk returns a tuple with the KnownFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetKnownForOk() ([]KnownFor, bool) {
	if o == nil || o.KnownFor == nil {
		return nil, false
	}
	return o.KnownFor, true
}

// HasKnownFor returns a boolean if a field has been set.
func (o *NameData) HasKnownFor() bool {
	if o != nil && o.KnownFor != nil {
		return true
	}

	return false
}

// SetKnownFor gets a reference to the given []KnownFor and assigns it to the KnownFor field.
func (o *NameData) SetKnownFor(v []KnownFor) {
	o.KnownFor = v
}

// GetCastMovies returns the CastMovies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetCastMovies() []CastMovie {
	if o == nil {
		var ret []CastMovie
		return ret
	}
	return o.CastMovies
}

// GetCastMoviesOk returns a tuple with the CastMovies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetCastMoviesOk() ([]CastMovie, bool) {
	if o == nil || o.CastMovies == nil {
		return nil, false
	}
	return o.CastMovies, true
}

// HasCastMovies returns a boolean if a field has been set.
func (o *NameData) HasCastMovies() bool {
	if o != nil && o.CastMovies != nil {
		return true
	}

	return false
}

// SetCastMovies gets a reference to the given []CastMovie and assigns it to the CastMovies field.
func (o *NameData) SetCastMovies(v []CastMovie) {
	o.CastMovies = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NameData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NameData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *NameData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *NameData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *NameData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *NameData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o NameData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.Summary.IsSet() {
		toSerialize["summary"] = o.Summary.Get()
	}
	if o.BirthDate.IsSet() {
		toSerialize["birthDate"] = o.BirthDate.Get()
	}
	if o.DeathDate.IsSet() {
		toSerialize["deathDate"] = o.DeathDate.Get()
	}
	if o.Awards.IsSet() {
		toSerialize["awards"] = o.Awards.Get()
	}
	if o.Height.IsSet() {
		toSerialize["height"] = o.Height.Get()
	}
	if o.KnownFor != nil {
		toSerialize["knownFor"] = o.KnownFor
	}
	if o.CastMovies != nil {
		toSerialize["castMovies"] = o.CastMovies
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNameData struct {
	value *NameData
	isSet bool
}

func (v NullableNameData) Get() *NameData {
	return v.value
}

func (v *NullableNameData) Set(val *NameData) {
	v.value = val
	v.isSet = true
}

func (v NullableNameData) IsSet() bool {
	return v.isSet
}

func (v *NullableNameData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameData(val *NameData) *NullableNameData {
	return &NullableNameData{value: val, isSet: true}
}

func (v NullableNameData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


