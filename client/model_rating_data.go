/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RatingData struct for RatingData
type RatingData struct {
	ImDbId NullableString `json:"imDbId,omitempty"`
	Title NullableString `json:"title,omitempty"`
	FullTitle NullableString `json:"fullTitle,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Year NullableString `json:"year,omitempty"`
	ImDb NullableString `json:"imDb,omitempty"`
	Metacritic NullableString `json:"metacritic,omitempty"`
	TheMovieDb NullableString `json:"theMovieDb,omitempty"`
	RottenTomatoes NullableString `json:"rottenTomatoes,omitempty"`
	FilmAffinity NullableString `json:"filmAffinity,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewRatingData instantiates a new RatingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatingData() *RatingData {
	this := RatingData{}
	return &this
}

// NewRatingDataWithDefaults instantiates a new RatingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingDataWithDefaults() *RatingData {
	this := RatingData{}
	return &this
}

// GetImDbId returns the ImDbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetImDbId() string {
	if o == nil || o.ImDbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbId.Get()
}

// GetImDbIdOk returns a tuple with the ImDbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetImDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbId.Get(), o.ImDbId.IsSet()
}

// HasImDbId returns a boolean if a field has been set.
func (o *RatingData) HasImDbId() bool {
	if o != nil && o.ImDbId.IsSet() {
		return true
	}

	return false
}

// SetImDbId gets a reference to the given NullableString and assigns it to the ImDbId field.
func (o *RatingData) SetImDbId(v string) {
	o.ImDbId.Set(&v)
}
// SetImDbIdNil sets the value for ImDbId to be an explicit nil
func (o *RatingData) SetImDbIdNil() {
	o.ImDbId.Set(nil)
}

// UnsetImDbId ensures that no value is present for ImDbId, not even an explicit nil
func (o *RatingData) UnsetImDbId() {
	o.ImDbId.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *RatingData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *RatingData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *RatingData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *RatingData) UnsetTitle() {
	o.Title.Unset()
}

// GetFullTitle returns the FullTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetFullTitle() string {
	if o == nil || o.FullTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullTitle.Get()
}

// GetFullTitleOk returns a tuple with the FullTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetFullTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTitle.Get(), o.FullTitle.IsSet()
}

// HasFullTitle returns a boolean if a field has been set.
func (o *RatingData) HasFullTitle() bool {
	if o != nil && o.FullTitle.IsSet() {
		return true
	}

	return false
}

// SetFullTitle gets a reference to the given NullableString and assigns it to the FullTitle field.
func (o *RatingData) SetFullTitle(v string) {
	o.FullTitle.Set(&v)
}
// SetFullTitleNil sets the value for FullTitle to be an explicit nil
func (o *RatingData) SetFullTitleNil() {
	o.FullTitle.Set(nil)
}

// UnsetFullTitle ensures that no value is present for FullTitle, not even an explicit nil
func (o *RatingData) UnsetFullTitle() {
	o.FullTitle.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RatingData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RatingData) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RatingData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RatingData) UnsetType() {
	o.Type.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetYear() string {
	if o == nil || o.Year.Get() == nil {
		var ret string
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *RatingData) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableString and assigns it to the Year field.
func (o *RatingData) SetYear(v string) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *RatingData) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *RatingData) UnsetYear() {
	o.Year.Unset()
}

// GetImDb returns the ImDb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetImDb() string {
	if o == nil || o.ImDb.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDb.Get()
}

// GetImDbOk returns a tuple with the ImDb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetImDbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDb.Get(), o.ImDb.IsSet()
}

// HasImDb returns a boolean if a field has been set.
func (o *RatingData) HasImDb() bool {
	if o != nil && o.ImDb.IsSet() {
		return true
	}

	return false
}

// SetImDb gets a reference to the given NullableString and assigns it to the ImDb field.
func (o *RatingData) SetImDb(v string) {
	o.ImDb.Set(&v)
}
// SetImDbNil sets the value for ImDb to be an explicit nil
func (o *RatingData) SetImDbNil() {
	o.ImDb.Set(nil)
}

// UnsetImDb ensures that no value is present for ImDb, not even an explicit nil
func (o *RatingData) UnsetImDb() {
	o.ImDb.Unset()
}

// GetMetacritic returns the Metacritic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetMetacritic() string {
	if o == nil || o.Metacritic.Get() == nil {
		var ret string
		return ret
	}
	return *o.Metacritic.Get()
}

// GetMetacriticOk returns a tuple with the Metacritic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetMetacriticOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metacritic.Get(), o.Metacritic.IsSet()
}

// HasMetacritic returns a boolean if a field has been set.
func (o *RatingData) HasMetacritic() bool {
	if o != nil && o.Metacritic.IsSet() {
		return true
	}

	return false
}

// SetMetacritic gets a reference to the given NullableString and assigns it to the Metacritic field.
func (o *RatingData) SetMetacritic(v string) {
	o.Metacritic.Set(&v)
}
// SetMetacriticNil sets the value for Metacritic to be an explicit nil
func (o *RatingData) SetMetacriticNil() {
	o.Metacritic.Set(nil)
}

// UnsetMetacritic ensures that no value is present for Metacritic, not even an explicit nil
func (o *RatingData) UnsetMetacritic() {
	o.Metacritic.Unset()
}

// GetTheMovieDb returns the TheMovieDb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetTheMovieDb() string {
	if o == nil || o.TheMovieDb.Get() == nil {
		var ret string
		return ret
	}
	return *o.TheMovieDb.Get()
}

// GetTheMovieDbOk returns a tuple with the TheMovieDb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetTheMovieDbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TheMovieDb.Get(), o.TheMovieDb.IsSet()
}

// HasTheMovieDb returns a boolean if a field has been set.
func (o *RatingData) HasTheMovieDb() bool {
	if o != nil && o.TheMovieDb.IsSet() {
		return true
	}

	return false
}

// SetTheMovieDb gets a reference to the given NullableString and assigns it to the TheMovieDb field.
func (o *RatingData) SetTheMovieDb(v string) {
	o.TheMovieDb.Set(&v)
}
// SetTheMovieDbNil sets the value for TheMovieDb to be an explicit nil
func (o *RatingData) SetTheMovieDbNil() {
	o.TheMovieDb.Set(nil)
}

// UnsetTheMovieDb ensures that no value is present for TheMovieDb, not even an explicit nil
func (o *RatingData) UnsetTheMovieDb() {
	o.TheMovieDb.Unset()
}

// GetRottenTomatoes returns the RottenTomatoes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetRottenTomatoes() string {
	if o == nil || o.RottenTomatoes.Get() == nil {
		var ret string
		return ret
	}
	return *o.RottenTomatoes.Get()
}

// GetRottenTomatoesOk returns a tuple with the RottenTomatoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetRottenTomatoesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RottenTomatoes.Get(), o.RottenTomatoes.IsSet()
}

// HasRottenTomatoes returns a boolean if a field has been set.
func (o *RatingData) HasRottenTomatoes() bool {
	if o != nil && o.RottenTomatoes.IsSet() {
		return true
	}

	return false
}

// SetRottenTomatoes gets a reference to the given NullableString and assigns it to the RottenTomatoes field.
func (o *RatingData) SetRottenTomatoes(v string) {
	o.RottenTomatoes.Set(&v)
}
// SetRottenTomatoesNil sets the value for RottenTomatoes to be an explicit nil
func (o *RatingData) SetRottenTomatoesNil() {
	o.RottenTomatoes.Set(nil)
}

// UnsetRottenTomatoes ensures that no value is present for RottenTomatoes, not even an explicit nil
func (o *RatingData) UnsetRottenTomatoes() {
	o.RottenTomatoes.Unset()
}

// GetFilmAffinity returns the FilmAffinity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetFilmAffinity() string {
	if o == nil || o.FilmAffinity.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilmAffinity.Get()
}

// GetFilmAffinityOk returns a tuple with the FilmAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetFilmAffinityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilmAffinity.Get(), o.FilmAffinity.IsSet()
}

// HasFilmAffinity returns a boolean if a field has been set.
func (o *RatingData) HasFilmAffinity() bool {
	if o != nil && o.FilmAffinity.IsSet() {
		return true
	}

	return false
}

// SetFilmAffinity gets a reference to the given NullableString and assigns it to the FilmAffinity field.
func (o *RatingData) SetFilmAffinity(v string) {
	o.FilmAffinity.Set(&v)
}
// SetFilmAffinityNil sets the value for FilmAffinity to be an explicit nil
func (o *RatingData) SetFilmAffinityNil() {
	o.FilmAffinity.Set(nil)
}

// UnsetFilmAffinity ensures that no value is present for FilmAffinity, not even an explicit nil
func (o *RatingData) UnsetFilmAffinity() {
	o.FilmAffinity.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RatingData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RatingData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *RatingData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *RatingData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *RatingData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *RatingData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o RatingData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImDbId.IsSet() {
		toSerialize["imDbId"] = o.ImDbId.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.FullTitle.IsSet() {
		toSerialize["fullTitle"] = o.FullTitle.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.ImDb.IsSet() {
		toSerialize["imDb"] = o.ImDb.Get()
	}
	if o.Metacritic.IsSet() {
		toSerialize["metacritic"] = o.Metacritic.Get()
	}
	if o.TheMovieDb.IsSet() {
		toSerialize["theMovieDb"] = o.TheMovieDb.Get()
	}
	if o.RottenTomatoes.IsSet() {
		toSerialize["rottenTomatoes"] = o.RottenTomatoes.Get()
	}
	if o.FilmAffinity.IsSet() {
		toSerialize["filmAffinity"] = o.FilmAffinity.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRatingData struct {
	value *RatingData
	isSet bool
}

func (v NullableRatingData) Get() *RatingData {
	return v.value
}

func (v *NullableRatingData) Set(val *RatingData) {
	v.value = val
	v.isSet = true
}

func (v NullableRatingData) IsSet() bool {
	return v.isSet
}

func (v *NullableRatingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatingData(val *RatingData) *NullableRatingData {
	return &NullableRatingData{value: val, isSet: true}
}

func (v NullableRatingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


