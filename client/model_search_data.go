/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SearchData struct for SearchData
type SearchData struct {
	SearchType string `json:"searchType"`
	Expression string `json:"expression"`
	Results []SearchResult `json:"results,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewSearchData instantiates a new SearchData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchData(searchType string, expression string) *SearchData {
	this := SearchData{}
	this.SearchType = searchType
	this.Expression = expression
	return &this
}

// NewSearchDataWithDefaults instantiates a new SearchData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDataWithDefaults() *SearchData {
	this := SearchData{}
	return &this
}

// GetSearchType returns the SearchType field value
func (o *SearchData) GetSearchType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchType
}

// GetSearchTypeOk returns a tuple with the SearchType field value
// and a boolean to check if the value has been set.
func (o *SearchData) GetSearchTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchType, true
}

// SetSearchType sets field value
func (o *SearchData) SetSearchType(v string) {
	o.SearchType = v
}

// GetExpression returns the Expression field value
func (o *SearchData) GetExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value
// and a boolean to check if the value has been set.
func (o *SearchData) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expression, true
}

// SetExpression sets field value
func (o *SearchData) SetExpression(v string) {
	o.Expression = v
}

// GetResults returns the Results field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchData) GetResults() []SearchResult {
	if o == nil {
		var ret []SearchResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchData) GetResultsOk() ([]SearchResult, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *SearchData) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []SearchResult and assigns it to the Results field.
func (o *SearchData) SetResults(v []SearchResult) {
	o.Results = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SearchData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *SearchData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *SearchData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *SearchData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o SearchData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["searchType"] = o.SearchType
	}
	if true {
		toSerialize["expression"] = o.Expression
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSearchData struct {
	value *SearchData
	isSet bool
}

func (v NullableSearchData) Get() *SearchData {
	return v.value
}

func (v *NullableSearchData) Set(val *SearchData) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchData) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchData(val *SearchData) *NullableSearchData {
	return &NullableSearchData{value: val, isSet: true}
}

func (v NullableSearchData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


