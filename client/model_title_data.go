/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TitleData struct for TitleData
type TitleData struct {
	Id NullableString `json:"id,omitempty"`
	Title NullableString `json:"title,omitempty"`
	OriginalTitle NullableString `json:"originalTitle,omitempty"`
	FullTitle NullableString `json:"fullTitle,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Year NullableString `json:"year,omitempty"`
	Image NullableString `json:"image,omitempty"`
	ReleaseDate NullableString `json:"releaseDate,omitempty"`
	RuntimeMins NullableString `json:"runtimeMins,omitempty"`
	RuntimeStr NullableString `json:"runtimeStr,omitempty"`
	Plot NullableString `json:"plot,omitempty"`
	PlotLocal NullableString `json:"plotLocal,omitempty"`
	PlotLocalIsRtl *bool `json:"plotLocalIsRtl,omitempty"`
	Awards NullableString `json:"awards,omitempty"`
	Directors NullableString `json:"directors,omitempty"`
	DirectorList []StarShort `json:"directorList,omitempty"`
	Writers NullableString `json:"writers,omitempty"`
	WriterList []StarShort `json:"writerList,omitempty"`
	Stars NullableString `json:"stars,omitempty"`
	StarList []StarShort `json:"starList,omitempty"`
	ActorList []ActorShort `json:"actorList,omitempty"`
	FullCast *FullCastData `json:"fullCast,omitempty"`
	Genres NullableString `json:"genres,omitempty"`
	GenreList []KeyValueItem `json:"genreList,omitempty"`
	Companies NullableString `json:"companies,omitempty"`
	CompanyList []CompanyShort `json:"companyList,omitempty"`
	Countries NullableString `json:"countries,omitempty"`
	CountryList []KeyValueItem `json:"countryList,omitempty"`
	Languages NullableString `json:"languages,omitempty"`
	LanguageList []KeyValueItem `json:"languageList,omitempty"`
	ContentRating NullableString `json:"contentRating,omitempty"`
	ImDbRating NullableString `json:"imDbRating,omitempty"`
	ImDbRatingVotes NullableString `json:"imDbRatingVotes,omitempty"`
	MetacriticRating NullableString `json:"metacriticRating,omitempty"`
	Ratings *RatingData `json:"ratings,omitempty"`
	Wikipedia *WikipediaData `json:"wikipedia,omitempty"`
	Posters *PosterData `json:"posters,omitempty"`
	Images *ImageData `json:"images,omitempty"`
	Trailer *TrailerData `json:"trailer,omitempty"`
	BoxOffice *BoxOfficeShort `json:"boxOffice,omitempty"`
	Tagline NullableString `json:"tagline,omitempty"`
	Keywords NullableString `json:"keywords,omitempty"`
	KeywordList []string `json:"keywordList,omitempty"`
	Similars []SimilarShort `json:"similars,omitempty"`
	TvSeriesInfo *TvSeriesInfo `json:"tvSeriesInfo,omitempty"`
	TvEpisodeInfo *TvEpisodeInfo `json:"tvEpisodeInfo,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewTitleData instantiates a new TitleData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTitleData() *TitleData {
	this := TitleData{}
	return &this
}

// NewTitleDataWithDefaults instantiates a new TitleData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTitleDataWithDefaults() *TitleData {
	this := TitleData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TitleData) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TitleData) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TitleData) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TitleData) UnsetId() {
	o.Id.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *TitleData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *TitleData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *TitleData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *TitleData) UnsetTitle() {
	o.Title.Unset()
}

// GetOriginalTitle returns the OriginalTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetOriginalTitle() string {
	if o == nil || o.OriginalTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.OriginalTitle.Get()
}

// GetOriginalTitleOk returns a tuple with the OriginalTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetOriginalTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalTitle.Get(), o.OriginalTitle.IsSet()
}

// HasOriginalTitle returns a boolean if a field has been set.
func (o *TitleData) HasOriginalTitle() bool {
	if o != nil && o.OriginalTitle.IsSet() {
		return true
	}

	return false
}

// SetOriginalTitle gets a reference to the given NullableString and assigns it to the OriginalTitle field.
func (o *TitleData) SetOriginalTitle(v string) {
	o.OriginalTitle.Set(&v)
}
// SetOriginalTitleNil sets the value for OriginalTitle to be an explicit nil
func (o *TitleData) SetOriginalTitleNil() {
	o.OriginalTitle.Set(nil)
}

// UnsetOriginalTitle ensures that no value is present for OriginalTitle, not even an explicit nil
func (o *TitleData) UnsetOriginalTitle() {
	o.OriginalTitle.Unset()
}

// GetFullTitle returns the FullTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetFullTitle() string {
	if o == nil || o.FullTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullTitle.Get()
}

// GetFullTitleOk returns a tuple with the FullTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetFullTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTitle.Get(), o.FullTitle.IsSet()
}

// HasFullTitle returns a boolean if a field has been set.
func (o *TitleData) HasFullTitle() bool {
	if o != nil && o.FullTitle.IsSet() {
		return true
	}

	return false
}

// SetFullTitle gets a reference to the given NullableString and assigns it to the FullTitle field.
func (o *TitleData) SetFullTitle(v string) {
	o.FullTitle.Set(&v)
}
// SetFullTitleNil sets the value for FullTitle to be an explicit nil
func (o *TitleData) SetFullTitleNil() {
	o.FullTitle.Set(nil)
}

// UnsetFullTitle ensures that no value is present for FullTitle, not even an explicit nil
func (o *TitleData) UnsetFullTitle() {
	o.FullTitle.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *TitleData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *TitleData) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *TitleData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *TitleData) UnsetType() {
	o.Type.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetYear() string {
	if o == nil || o.Year.Get() == nil {
		var ret string
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *TitleData) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableString and assigns it to the Year field.
func (o *TitleData) SetYear(v string) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *TitleData) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *TitleData) UnsetYear() {
	o.Year.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetImage() string {
	if o == nil || o.Image.Get() == nil {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *TitleData) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *TitleData) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *TitleData) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *TitleData) UnsetImage() {
	o.Image.Unset()
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetReleaseDate() string {
	if o == nil || o.ReleaseDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReleaseDate.Get()
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetReleaseDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseDate.Get(), o.ReleaseDate.IsSet()
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *TitleData) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate.IsSet() {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given NullableString and assigns it to the ReleaseDate field.
func (o *TitleData) SetReleaseDate(v string) {
	o.ReleaseDate.Set(&v)
}
// SetReleaseDateNil sets the value for ReleaseDate to be an explicit nil
func (o *TitleData) SetReleaseDateNil() {
	o.ReleaseDate.Set(nil)
}

// UnsetReleaseDate ensures that no value is present for ReleaseDate, not even an explicit nil
func (o *TitleData) UnsetReleaseDate() {
	o.ReleaseDate.Unset()
}

// GetRuntimeMins returns the RuntimeMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetRuntimeMins() string {
	if o == nil || o.RuntimeMins.Get() == nil {
		var ret string
		return ret
	}
	return *o.RuntimeMins.Get()
}

// GetRuntimeMinsOk returns a tuple with the RuntimeMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetRuntimeMinsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuntimeMins.Get(), o.RuntimeMins.IsSet()
}

// HasRuntimeMins returns a boolean if a field has been set.
func (o *TitleData) HasRuntimeMins() bool {
	if o != nil && o.RuntimeMins.IsSet() {
		return true
	}

	return false
}

// SetRuntimeMins gets a reference to the given NullableString and assigns it to the RuntimeMins field.
func (o *TitleData) SetRuntimeMins(v string) {
	o.RuntimeMins.Set(&v)
}
// SetRuntimeMinsNil sets the value for RuntimeMins to be an explicit nil
func (o *TitleData) SetRuntimeMinsNil() {
	o.RuntimeMins.Set(nil)
}

// UnsetRuntimeMins ensures that no value is present for RuntimeMins, not even an explicit nil
func (o *TitleData) UnsetRuntimeMins() {
	o.RuntimeMins.Unset()
}

// GetRuntimeStr returns the RuntimeStr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetRuntimeStr() string {
	if o == nil || o.RuntimeStr.Get() == nil {
		var ret string
		return ret
	}
	return *o.RuntimeStr.Get()
}

// GetRuntimeStrOk returns a tuple with the RuntimeStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetRuntimeStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuntimeStr.Get(), o.RuntimeStr.IsSet()
}

// HasRuntimeStr returns a boolean if a field has been set.
func (o *TitleData) HasRuntimeStr() bool {
	if o != nil && o.RuntimeStr.IsSet() {
		return true
	}

	return false
}

// SetRuntimeStr gets a reference to the given NullableString and assigns it to the RuntimeStr field.
func (o *TitleData) SetRuntimeStr(v string) {
	o.RuntimeStr.Set(&v)
}
// SetRuntimeStrNil sets the value for RuntimeStr to be an explicit nil
func (o *TitleData) SetRuntimeStrNil() {
	o.RuntimeStr.Set(nil)
}

// UnsetRuntimeStr ensures that no value is present for RuntimeStr, not even an explicit nil
func (o *TitleData) UnsetRuntimeStr() {
	o.RuntimeStr.Unset()
}

// GetPlot returns the Plot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetPlot() string {
	if o == nil || o.Plot.Get() == nil {
		var ret string
		return ret
	}
	return *o.Plot.Get()
}

// GetPlotOk returns a tuple with the Plot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetPlotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plot.Get(), o.Plot.IsSet()
}

// HasPlot returns a boolean if a field has been set.
func (o *TitleData) HasPlot() bool {
	if o != nil && o.Plot.IsSet() {
		return true
	}

	return false
}

// SetPlot gets a reference to the given NullableString and assigns it to the Plot field.
func (o *TitleData) SetPlot(v string) {
	o.Plot.Set(&v)
}
// SetPlotNil sets the value for Plot to be an explicit nil
func (o *TitleData) SetPlotNil() {
	o.Plot.Set(nil)
}

// UnsetPlot ensures that no value is present for Plot, not even an explicit nil
func (o *TitleData) UnsetPlot() {
	o.Plot.Unset()
}

// GetPlotLocal returns the PlotLocal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetPlotLocal() string {
	if o == nil || o.PlotLocal.Get() == nil {
		var ret string
		return ret
	}
	return *o.PlotLocal.Get()
}

// GetPlotLocalOk returns a tuple with the PlotLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetPlotLocalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlotLocal.Get(), o.PlotLocal.IsSet()
}

// HasPlotLocal returns a boolean if a field has been set.
func (o *TitleData) HasPlotLocal() bool {
	if o != nil && o.PlotLocal.IsSet() {
		return true
	}

	return false
}

// SetPlotLocal gets a reference to the given NullableString and assigns it to the PlotLocal field.
func (o *TitleData) SetPlotLocal(v string) {
	o.PlotLocal.Set(&v)
}
// SetPlotLocalNil sets the value for PlotLocal to be an explicit nil
func (o *TitleData) SetPlotLocalNil() {
	o.PlotLocal.Set(nil)
}

// UnsetPlotLocal ensures that no value is present for PlotLocal, not even an explicit nil
func (o *TitleData) UnsetPlotLocal() {
	o.PlotLocal.Unset()
}

// GetPlotLocalIsRtl returns the PlotLocalIsRtl field value if set, zero value otherwise.
func (o *TitleData) GetPlotLocalIsRtl() bool {
	if o == nil || o.PlotLocalIsRtl == nil {
		var ret bool
		return ret
	}
	return *o.PlotLocalIsRtl
}

// GetPlotLocalIsRtlOk returns a tuple with the PlotLocalIsRtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetPlotLocalIsRtlOk() (*bool, bool) {
	if o == nil || o.PlotLocalIsRtl == nil {
		return nil, false
	}
	return o.PlotLocalIsRtl, true
}

// HasPlotLocalIsRtl returns a boolean if a field has been set.
func (o *TitleData) HasPlotLocalIsRtl() bool {
	if o != nil && o.PlotLocalIsRtl != nil {
		return true
	}

	return false
}

// SetPlotLocalIsRtl gets a reference to the given bool and assigns it to the PlotLocalIsRtl field.
func (o *TitleData) SetPlotLocalIsRtl(v bool) {
	o.PlotLocalIsRtl = &v
}

// GetAwards returns the Awards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetAwards() string {
	if o == nil || o.Awards.Get() == nil {
		var ret string
		return ret
	}
	return *o.Awards.Get()
}

// GetAwardsOk returns a tuple with the Awards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetAwardsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Awards.Get(), o.Awards.IsSet()
}

// HasAwards returns a boolean if a field has been set.
func (o *TitleData) HasAwards() bool {
	if o != nil && o.Awards.IsSet() {
		return true
	}

	return false
}

// SetAwards gets a reference to the given NullableString and assigns it to the Awards field.
func (o *TitleData) SetAwards(v string) {
	o.Awards.Set(&v)
}
// SetAwardsNil sets the value for Awards to be an explicit nil
func (o *TitleData) SetAwardsNil() {
	o.Awards.Set(nil)
}

// UnsetAwards ensures that no value is present for Awards, not even an explicit nil
func (o *TitleData) UnsetAwards() {
	o.Awards.Unset()
}

// GetDirectors returns the Directors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetDirectors() string {
	if o == nil || o.Directors.Get() == nil {
		var ret string
		return ret
	}
	return *o.Directors.Get()
}

// GetDirectorsOk returns a tuple with the Directors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetDirectorsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Directors.Get(), o.Directors.IsSet()
}

// HasDirectors returns a boolean if a field has been set.
func (o *TitleData) HasDirectors() bool {
	if o != nil && o.Directors.IsSet() {
		return true
	}

	return false
}

// SetDirectors gets a reference to the given NullableString and assigns it to the Directors field.
func (o *TitleData) SetDirectors(v string) {
	o.Directors.Set(&v)
}
// SetDirectorsNil sets the value for Directors to be an explicit nil
func (o *TitleData) SetDirectorsNil() {
	o.Directors.Set(nil)
}

// UnsetDirectors ensures that no value is present for Directors, not even an explicit nil
func (o *TitleData) UnsetDirectors() {
	o.Directors.Unset()
}

// GetDirectorList returns the DirectorList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetDirectorList() []StarShort {
	if o == nil {
		var ret []StarShort
		return ret
	}
	return o.DirectorList
}

// GetDirectorListOk returns a tuple with the DirectorList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetDirectorListOk() ([]StarShort, bool) {
	if o == nil || o.DirectorList == nil {
		return nil, false
	}
	return o.DirectorList, true
}

// HasDirectorList returns a boolean if a field has been set.
func (o *TitleData) HasDirectorList() bool {
	if o != nil && o.DirectorList != nil {
		return true
	}

	return false
}

// SetDirectorList gets a reference to the given []StarShort and assigns it to the DirectorList field.
func (o *TitleData) SetDirectorList(v []StarShort) {
	o.DirectorList = v
}

// GetWriters returns the Writers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetWriters() string {
	if o == nil || o.Writers.Get() == nil {
		var ret string
		return ret
	}
	return *o.Writers.Get()
}

// GetWritersOk returns a tuple with the Writers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetWritersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Writers.Get(), o.Writers.IsSet()
}

// HasWriters returns a boolean if a field has been set.
func (o *TitleData) HasWriters() bool {
	if o != nil && o.Writers.IsSet() {
		return true
	}

	return false
}

// SetWriters gets a reference to the given NullableString and assigns it to the Writers field.
func (o *TitleData) SetWriters(v string) {
	o.Writers.Set(&v)
}
// SetWritersNil sets the value for Writers to be an explicit nil
func (o *TitleData) SetWritersNil() {
	o.Writers.Set(nil)
}

// UnsetWriters ensures that no value is present for Writers, not even an explicit nil
func (o *TitleData) UnsetWriters() {
	o.Writers.Unset()
}

// GetWriterList returns the WriterList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetWriterList() []StarShort {
	if o == nil {
		var ret []StarShort
		return ret
	}
	return o.WriterList
}

// GetWriterListOk returns a tuple with the WriterList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetWriterListOk() ([]StarShort, bool) {
	if o == nil || o.WriterList == nil {
		return nil, false
	}
	return o.WriterList, true
}

// HasWriterList returns a boolean if a field has been set.
func (o *TitleData) HasWriterList() bool {
	if o != nil && o.WriterList != nil {
		return true
	}

	return false
}

// SetWriterList gets a reference to the given []StarShort and assigns it to the WriterList field.
func (o *TitleData) SetWriterList(v []StarShort) {
	o.WriterList = v
}

// GetStars returns the Stars field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetStars() string {
	if o == nil || o.Stars.Get() == nil {
		var ret string
		return ret
	}
	return *o.Stars.Get()
}

// GetStarsOk returns a tuple with the Stars field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetStarsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stars.Get(), o.Stars.IsSet()
}

// HasStars returns a boolean if a field has been set.
func (o *TitleData) HasStars() bool {
	if o != nil && o.Stars.IsSet() {
		return true
	}

	return false
}

// SetStars gets a reference to the given NullableString and assigns it to the Stars field.
func (o *TitleData) SetStars(v string) {
	o.Stars.Set(&v)
}
// SetStarsNil sets the value for Stars to be an explicit nil
func (o *TitleData) SetStarsNil() {
	o.Stars.Set(nil)
}

// UnsetStars ensures that no value is present for Stars, not even an explicit nil
func (o *TitleData) UnsetStars() {
	o.Stars.Unset()
}

// GetStarList returns the StarList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetStarList() []StarShort {
	if o == nil {
		var ret []StarShort
		return ret
	}
	return o.StarList
}

// GetStarListOk returns a tuple with the StarList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetStarListOk() ([]StarShort, bool) {
	if o == nil || o.StarList == nil {
		return nil, false
	}
	return o.StarList, true
}

// HasStarList returns a boolean if a field has been set.
func (o *TitleData) HasStarList() bool {
	if o != nil && o.StarList != nil {
		return true
	}

	return false
}

// SetStarList gets a reference to the given []StarShort and assigns it to the StarList field.
func (o *TitleData) SetStarList(v []StarShort) {
	o.StarList = v
}

// GetActorList returns the ActorList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetActorList() []ActorShort {
	if o == nil {
		var ret []ActorShort
		return ret
	}
	return o.ActorList
}

// GetActorListOk returns a tuple with the ActorList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetActorListOk() ([]ActorShort, bool) {
	if o == nil || o.ActorList == nil {
		return nil, false
	}
	return o.ActorList, true
}

// HasActorList returns a boolean if a field has been set.
func (o *TitleData) HasActorList() bool {
	if o != nil && o.ActorList != nil {
		return true
	}

	return false
}

// SetActorList gets a reference to the given []ActorShort and assigns it to the ActorList field.
func (o *TitleData) SetActorList(v []ActorShort) {
	o.ActorList = v
}

// GetFullCast returns the FullCast field value if set, zero value otherwise.
func (o *TitleData) GetFullCast() FullCastData {
	if o == nil || o.FullCast == nil {
		var ret FullCastData
		return ret
	}
	return *o.FullCast
}

// GetFullCastOk returns a tuple with the FullCast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetFullCastOk() (*FullCastData, bool) {
	if o == nil || o.FullCast == nil {
		return nil, false
	}
	return o.FullCast, true
}

// HasFullCast returns a boolean if a field has been set.
func (o *TitleData) HasFullCast() bool {
	if o != nil && o.FullCast != nil {
		return true
	}

	return false
}

// SetFullCast gets a reference to the given FullCastData and assigns it to the FullCast field.
func (o *TitleData) SetFullCast(v FullCastData) {
	o.FullCast = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetGenres() string {
	if o == nil || o.Genres.Get() == nil {
		var ret string
		return ret
	}
	return *o.Genres.Get()
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetGenresOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Genres.Get(), o.Genres.IsSet()
}

// HasGenres returns a boolean if a field has been set.
func (o *TitleData) HasGenres() bool {
	if o != nil && o.Genres.IsSet() {
		return true
	}

	return false
}

// SetGenres gets a reference to the given NullableString and assigns it to the Genres field.
func (o *TitleData) SetGenres(v string) {
	o.Genres.Set(&v)
}
// SetGenresNil sets the value for Genres to be an explicit nil
func (o *TitleData) SetGenresNil() {
	o.Genres.Set(nil)
}

// UnsetGenres ensures that no value is present for Genres, not even an explicit nil
func (o *TitleData) UnsetGenres() {
	o.Genres.Unset()
}

// GetGenreList returns the GenreList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetGenreList() []KeyValueItem {
	if o == nil {
		var ret []KeyValueItem
		return ret
	}
	return o.GenreList
}

// GetGenreListOk returns a tuple with the GenreList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetGenreListOk() ([]KeyValueItem, bool) {
	if o == nil || o.GenreList == nil {
		return nil, false
	}
	return o.GenreList, true
}

// HasGenreList returns a boolean if a field has been set.
func (o *TitleData) HasGenreList() bool {
	if o != nil && o.GenreList != nil {
		return true
	}

	return false
}

// SetGenreList gets a reference to the given []KeyValueItem and assigns it to the GenreList field.
func (o *TitleData) SetGenreList(v []KeyValueItem) {
	o.GenreList = v
}

// GetCompanies returns the Companies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetCompanies() string {
	if o == nil || o.Companies.Get() == nil {
		var ret string
		return ret
	}
	return *o.Companies.Get()
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetCompaniesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Companies.Get(), o.Companies.IsSet()
}

// HasCompanies returns a boolean if a field has been set.
func (o *TitleData) HasCompanies() bool {
	if o != nil && o.Companies.IsSet() {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given NullableString and assigns it to the Companies field.
func (o *TitleData) SetCompanies(v string) {
	o.Companies.Set(&v)
}
// SetCompaniesNil sets the value for Companies to be an explicit nil
func (o *TitleData) SetCompaniesNil() {
	o.Companies.Set(nil)
}

// UnsetCompanies ensures that no value is present for Companies, not even an explicit nil
func (o *TitleData) UnsetCompanies() {
	o.Companies.Unset()
}

// GetCompanyList returns the CompanyList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetCompanyList() []CompanyShort {
	if o == nil {
		var ret []CompanyShort
		return ret
	}
	return o.CompanyList
}

// GetCompanyListOk returns a tuple with the CompanyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetCompanyListOk() ([]CompanyShort, bool) {
	if o == nil || o.CompanyList == nil {
		return nil, false
	}
	return o.CompanyList, true
}

// HasCompanyList returns a boolean if a field has been set.
func (o *TitleData) HasCompanyList() bool {
	if o != nil && o.CompanyList != nil {
		return true
	}

	return false
}

// SetCompanyList gets a reference to the given []CompanyShort and assigns it to the CompanyList field.
func (o *TitleData) SetCompanyList(v []CompanyShort) {
	o.CompanyList = v
}

// GetCountries returns the Countries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetCountries() string {
	if o == nil || o.Countries.Get() == nil {
		var ret string
		return ret
	}
	return *o.Countries.Get()
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetCountriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Countries.Get(), o.Countries.IsSet()
}

// HasCountries returns a boolean if a field has been set.
func (o *TitleData) HasCountries() bool {
	if o != nil && o.Countries.IsSet() {
		return true
	}

	return false
}

// SetCountries gets a reference to the given NullableString and assigns it to the Countries field.
func (o *TitleData) SetCountries(v string) {
	o.Countries.Set(&v)
}
// SetCountriesNil sets the value for Countries to be an explicit nil
func (o *TitleData) SetCountriesNil() {
	o.Countries.Set(nil)
}

// UnsetCountries ensures that no value is present for Countries, not even an explicit nil
func (o *TitleData) UnsetCountries() {
	o.Countries.Unset()
}

// GetCountryList returns the CountryList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetCountryList() []KeyValueItem {
	if o == nil {
		var ret []KeyValueItem
		return ret
	}
	return o.CountryList
}

// GetCountryListOk returns a tuple with the CountryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetCountryListOk() ([]KeyValueItem, bool) {
	if o == nil || o.CountryList == nil {
		return nil, false
	}
	return o.CountryList, true
}

// HasCountryList returns a boolean if a field has been set.
func (o *TitleData) HasCountryList() bool {
	if o != nil && o.CountryList != nil {
		return true
	}

	return false
}

// SetCountryList gets a reference to the given []KeyValueItem and assigns it to the CountryList field.
func (o *TitleData) SetCountryList(v []KeyValueItem) {
	o.CountryList = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetLanguages() string {
	if o == nil || o.Languages.Get() == nil {
		var ret string
		return ret
	}
	return *o.Languages.Get()
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetLanguagesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Languages.Get(), o.Languages.IsSet()
}

// HasLanguages returns a boolean if a field has been set.
func (o *TitleData) HasLanguages() bool {
	if o != nil && o.Languages.IsSet() {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given NullableString and assigns it to the Languages field.
func (o *TitleData) SetLanguages(v string) {
	o.Languages.Set(&v)
}
// SetLanguagesNil sets the value for Languages to be an explicit nil
func (o *TitleData) SetLanguagesNil() {
	o.Languages.Set(nil)
}

// UnsetLanguages ensures that no value is present for Languages, not even an explicit nil
func (o *TitleData) UnsetLanguages() {
	o.Languages.Unset()
}

// GetLanguageList returns the LanguageList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetLanguageList() []KeyValueItem {
	if o == nil {
		var ret []KeyValueItem
		return ret
	}
	return o.LanguageList
}

// GetLanguageListOk returns a tuple with the LanguageList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetLanguageListOk() ([]KeyValueItem, bool) {
	if o == nil || o.LanguageList == nil {
		return nil, false
	}
	return o.LanguageList, true
}

// HasLanguageList returns a boolean if a field has been set.
func (o *TitleData) HasLanguageList() bool {
	if o != nil && o.LanguageList != nil {
		return true
	}

	return false
}

// SetLanguageList gets a reference to the given []KeyValueItem and assigns it to the LanguageList field.
func (o *TitleData) SetLanguageList(v []KeyValueItem) {
	o.LanguageList = v
}

// GetContentRating returns the ContentRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetContentRating() string {
	if o == nil || o.ContentRating.Get() == nil {
		var ret string
		return ret
	}
	return *o.ContentRating.Get()
}

// GetContentRatingOk returns a tuple with the ContentRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetContentRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentRating.Get(), o.ContentRating.IsSet()
}

// HasContentRating returns a boolean if a field has been set.
func (o *TitleData) HasContentRating() bool {
	if o != nil && o.ContentRating.IsSet() {
		return true
	}

	return false
}

// SetContentRating gets a reference to the given NullableString and assigns it to the ContentRating field.
func (o *TitleData) SetContentRating(v string) {
	o.ContentRating.Set(&v)
}
// SetContentRatingNil sets the value for ContentRating to be an explicit nil
func (o *TitleData) SetContentRatingNil() {
	o.ContentRating.Set(nil)
}

// UnsetContentRating ensures that no value is present for ContentRating, not even an explicit nil
func (o *TitleData) UnsetContentRating() {
	o.ContentRating.Unset()
}

// GetImDbRating returns the ImDbRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetImDbRating() string {
	if o == nil || o.ImDbRating.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbRating.Get()
}

// GetImDbRatingOk returns a tuple with the ImDbRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetImDbRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbRating.Get(), o.ImDbRating.IsSet()
}

// HasImDbRating returns a boolean if a field has been set.
func (o *TitleData) HasImDbRating() bool {
	if o != nil && o.ImDbRating.IsSet() {
		return true
	}

	return false
}

// SetImDbRating gets a reference to the given NullableString and assigns it to the ImDbRating field.
func (o *TitleData) SetImDbRating(v string) {
	o.ImDbRating.Set(&v)
}
// SetImDbRatingNil sets the value for ImDbRating to be an explicit nil
func (o *TitleData) SetImDbRatingNil() {
	o.ImDbRating.Set(nil)
}

// UnsetImDbRating ensures that no value is present for ImDbRating, not even an explicit nil
func (o *TitleData) UnsetImDbRating() {
	o.ImDbRating.Unset()
}

// GetImDbRatingVotes returns the ImDbRatingVotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetImDbRatingVotes() string {
	if o == nil || o.ImDbRatingVotes.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbRatingVotes.Get()
}

// GetImDbRatingVotesOk returns a tuple with the ImDbRatingVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetImDbRatingVotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbRatingVotes.Get(), o.ImDbRatingVotes.IsSet()
}

// HasImDbRatingVotes returns a boolean if a field has been set.
func (o *TitleData) HasImDbRatingVotes() bool {
	if o != nil && o.ImDbRatingVotes.IsSet() {
		return true
	}

	return false
}

// SetImDbRatingVotes gets a reference to the given NullableString and assigns it to the ImDbRatingVotes field.
func (o *TitleData) SetImDbRatingVotes(v string) {
	o.ImDbRatingVotes.Set(&v)
}
// SetImDbRatingVotesNil sets the value for ImDbRatingVotes to be an explicit nil
func (o *TitleData) SetImDbRatingVotesNil() {
	o.ImDbRatingVotes.Set(nil)
}

// UnsetImDbRatingVotes ensures that no value is present for ImDbRatingVotes, not even an explicit nil
func (o *TitleData) UnsetImDbRatingVotes() {
	o.ImDbRatingVotes.Unset()
}

// GetMetacriticRating returns the MetacriticRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetMetacriticRating() string {
	if o == nil || o.MetacriticRating.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetacriticRating.Get()
}

// GetMetacriticRatingOk returns a tuple with the MetacriticRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetMetacriticRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetacriticRating.Get(), o.MetacriticRating.IsSet()
}

// HasMetacriticRating returns a boolean if a field has been set.
func (o *TitleData) HasMetacriticRating() bool {
	if o != nil && o.MetacriticRating.IsSet() {
		return true
	}

	return false
}

// SetMetacriticRating gets a reference to the given NullableString and assigns it to the MetacriticRating field.
func (o *TitleData) SetMetacriticRating(v string) {
	o.MetacriticRating.Set(&v)
}
// SetMetacriticRatingNil sets the value for MetacriticRating to be an explicit nil
func (o *TitleData) SetMetacriticRatingNil() {
	o.MetacriticRating.Set(nil)
}

// UnsetMetacriticRating ensures that no value is present for MetacriticRating, not even an explicit nil
func (o *TitleData) UnsetMetacriticRating() {
	o.MetacriticRating.Unset()
}

// GetRatings returns the Ratings field value if set, zero value otherwise.
func (o *TitleData) GetRatings() RatingData {
	if o == nil || o.Ratings == nil {
		var ret RatingData
		return ret
	}
	return *o.Ratings
}

// GetRatingsOk returns a tuple with the Ratings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetRatingsOk() (*RatingData, bool) {
	if o == nil || o.Ratings == nil {
		return nil, false
	}
	return o.Ratings, true
}

// HasRatings returns a boolean if a field has been set.
func (o *TitleData) HasRatings() bool {
	if o != nil && o.Ratings != nil {
		return true
	}

	return false
}

// SetRatings gets a reference to the given RatingData and assigns it to the Ratings field.
func (o *TitleData) SetRatings(v RatingData) {
	o.Ratings = &v
}

// GetWikipedia returns the Wikipedia field value if set, zero value otherwise.
func (o *TitleData) GetWikipedia() WikipediaData {
	if o == nil || o.Wikipedia == nil {
		var ret WikipediaData
		return ret
	}
	return *o.Wikipedia
}

// GetWikipediaOk returns a tuple with the Wikipedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetWikipediaOk() (*WikipediaData, bool) {
	if o == nil || o.Wikipedia == nil {
		return nil, false
	}
	return o.Wikipedia, true
}

// HasWikipedia returns a boolean if a field has been set.
func (o *TitleData) HasWikipedia() bool {
	if o != nil && o.Wikipedia != nil {
		return true
	}

	return false
}

// SetWikipedia gets a reference to the given WikipediaData and assigns it to the Wikipedia field.
func (o *TitleData) SetWikipedia(v WikipediaData) {
	o.Wikipedia = &v
}

// GetPosters returns the Posters field value if set, zero value otherwise.
func (o *TitleData) GetPosters() PosterData {
	if o == nil || o.Posters == nil {
		var ret PosterData
		return ret
	}
	return *o.Posters
}

// GetPostersOk returns a tuple with the Posters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetPostersOk() (*PosterData, bool) {
	if o == nil || o.Posters == nil {
		return nil, false
	}
	return o.Posters, true
}

// HasPosters returns a boolean if a field has been set.
func (o *TitleData) HasPosters() bool {
	if o != nil && o.Posters != nil {
		return true
	}

	return false
}

// SetPosters gets a reference to the given PosterData and assigns it to the Posters field.
func (o *TitleData) SetPosters(v PosterData) {
	o.Posters = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *TitleData) GetImages() ImageData {
	if o == nil || o.Images == nil {
		var ret ImageData
		return ret
	}
	return *o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetImagesOk() (*ImageData, bool) {
	if o == nil || o.Images == nil {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *TitleData) HasImages() bool {
	if o != nil && o.Images != nil {
		return true
	}

	return false
}

// SetImages gets a reference to the given ImageData and assigns it to the Images field.
func (o *TitleData) SetImages(v ImageData) {
	o.Images = &v
}

// GetTrailer returns the Trailer field value if set, zero value otherwise.
func (o *TitleData) GetTrailer() TrailerData {
	if o == nil || o.Trailer == nil {
		var ret TrailerData
		return ret
	}
	return *o.Trailer
}

// GetTrailerOk returns a tuple with the Trailer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetTrailerOk() (*TrailerData, bool) {
	if o == nil || o.Trailer == nil {
		return nil, false
	}
	return o.Trailer, true
}

// HasTrailer returns a boolean if a field has been set.
func (o *TitleData) HasTrailer() bool {
	if o != nil && o.Trailer != nil {
		return true
	}

	return false
}

// SetTrailer gets a reference to the given TrailerData and assigns it to the Trailer field.
func (o *TitleData) SetTrailer(v TrailerData) {
	o.Trailer = &v
}

// GetBoxOffice returns the BoxOffice field value if set, zero value otherwise.
func (o *TitleData) GetBoxOffice() BoxOfficeShort {
	if o == nil || o.BoxOffice == nil {
		var ret BoxOfficeShort
		return ret
	}
	return *o.BoxOffice
}

// GetBoxOfficeOk returns a tuple with the BoxOffice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetBoxOfficeOk() (*BoxOfficeShort, bool) {
	if o == nil || o.BoxOffice == nil {
		return nil, false
	}
	return o.BoxOffice, true
}

// HasBoxOffice returns a boolean if a field has been set.
func (o *TitleData) HasBoxOffice() bool {
	if o != nil && o.BoxOffice != nil {
		return true
	}

	return false
}

// SetBoxOffice gets a reference to the given BoxOfficeShort and assigns it to the BoxOffice field.
func (o *TitleData) SetBoxOffice(v BoxOfficeShort) {
	o.BoxOffice = &v
}

// GetTagline returns the Tagline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetTagline() string {
	if o == nil || o.Tagline.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tagline.Get()
}

// GetTaglineOk returns a tuple with the Tagline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetTaglineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tagline.Get(), o.Tagline.IsSet()
}

// HasTagline returns a boolean if a field has been set.
func (o *TitleData) HasTagline() bool {
	if o != nil && o.Tagline.IsSet() {
		return true
	}

	return false
}

// SetTagline gets a reference to the given NullableString and assigns it to the Tagline field.
func (o *TitleData) SetTagline(v string) {
	o.Tagline.Set(&v)
}
// SetTaglineNil sets the value for Tagline to be an explicit nil
func (o *TitleData) SetTaglineNil() {
	o.Tagline.Set(nil)
}

// UnsetTagline ensures that no value is present for Tagline, not even an explicit nil
func (o *TitleData) UnsetTagline() {
	o.Tagline.Unset()
}

// GetKeywords returns the Keywords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetKeywords() string {
	if o == nil || o.Keywords.Get() == nil {
		var ret string
		return ret
	}
	return *o.Keywords.Get()
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetKeywordsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keywords.Get(), o.Keywords.IsSet()
}

// HasKeywords returns a boolean if a field has been set.
func (o *TitleData) HasKeywords() bool {
	if o != nil && o.Keywords.IsSet() {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given NullableString and assigns it to the Keywords field.
func (o *TitleData) SetKeywords(v string) {
	o.Keywords.Set(&v)
}
// SetKeywordsNil sets the value for Keywords to be an explicit nil
func (o *TitleData) SetKeywordsNil() {
	o.Keywords.Set(nil)
}

// UnsetKeywords ensures that no value is present for Keywords, not even an explicit nil
func (o *TitleData) UnsetKeywords() {
	o.Keywords.Unset()
}

// GetKeywordList returns the KeywordList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetKeywordList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.KeywordList
}

// GetKeywordListOk returns a tuple with the KeywordList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetKeywordListOk() ([]string, bool) {
	if o == nil || o.KeywordList == nil {
		return nil, false
	}
	return o.KeywordList, true
}

// HasKeywordList returns a boolean if a field has been set.
func (o *TitleData) HasKeywordList() bool {
	if o != nil && o.KeywordList != nil {
		return true
	}

	return false
}

// SetKeywordList gets a reference to the given []string and assigns it to the KeywordList field.
func (o *TitleData) SetKeywordList(v []string) {
	o.KeywordList = v
}

// GetSimilars returns the Similars field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetSimilars() []SimilarShort {
	if o == nil {
		var ret []SimilarShort
		return ret
	}
	return o.Similars
}

// GetSimilarsOk returns a tuple with the Similars field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetSimilarsOk() ([]SimilarShort, bool) {
	if o == nil || o.Similars == nil {
		return nil, false
	}
	return o.Similars, true
}

// HasSimilars returns a boolean if a field has been set.
func (o *TitleData) HasSimilars() bool {
	if o != nil && o.Similars != nil {
		return true
	}

	return false
}

// SetSimilars gets a reference to the given []SimilarShort and assigns it to the Similars field.
func (o *TitleData) SetSimilars(v []SimilarShort) {
	o.Similars = v
}

// GetTvSeriesInfo returns the TvSeriesInfo field value if set, zero value otherwise.
func (o *TitleData) GetTvSeriesInfo() TvSeriesInfo {
	if o == nil || o.TvSeriesInfo == nil {
		var ret TvSeriesInfo
		return ret
	}
	return *o.TvSeriesInfo
}

// GetTvSeriesInfoOk returns a tuple with the TvSeriesInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetTvSeriesInfoOk() (*TvSeriesInfo, bool) {
	if o == nil || o.TvSeriesInfo == nil {
		return nil, false
	}
	return o.TvSeriesInfo, true
}

// HasTvSeriesInfo returns a boolean if a field has been set.
func (o *TitleData) HasTvSeriesInfo() bool {
	if o != nil && o.TvSeriesInfo != nil {
		return true
	}

	return false
}

// SetTvSeriesInfo gets a reference to the given TvSeriesInfo and assigns it to the TvSeriesInfo field.
func (o *TitleData) SetTvSeriesInfo(v TvSeriesInfo) {
	o.TvSeriesInfo = &v
}

// GetTvEpisodeInfo returns the TvEpisodeInfo field value if set, zero value otherwise.
func (o *TitleData) GetTvEpisodeInfo() TvEpisodeInfo {
	if o == nil || o.TvEpisodeInfo == nil {
		var ret TvEpisodeInfo
		return ret
	}
	return *o.TvEpisodeInfo
}

// GetTvEpisodeInfoOk returns a tuple with the TvEpisodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleData) GetTvEpisodeInfoOk() (*TvEpisodeInfo, bool) {
	if o == nil || o.TvEpisodeInfo == nil {
		return nil, false
	}
	return o.TvEpisodeInfo, true
}

// HasTvEpisodeInfo returns a boolean if a field has been set.
func (o *TitleData) HasTvEpisodeInfo() bool {
	if o != nil && o.TvEpisodeInfo != nil {
		return true
	}

	return false
}

// SetTvEpisodeInfo gets a reference to the given TvEpisodeInfo and assigns it to the TvEpisodeInfo field.
func (o *TitleData) SetTvEpisodeInfo(v TvEpisodeInfo) {
	o.TvEpisodeInfo = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TitleData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TitleData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *TitleData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *TitleData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *TitleData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *TitleData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o TitleData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.OriginalTitle.IsSet() {
		toSerialize["originalTitle"] = o.OriginalTitle.Get()
	}
	if o.FullTitle.IsSet() {
		toSerialize["fullTitle"] = o.FullTitle.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.ReleaseDate.IsSet() {
		toSerialize["releaseDate"] = o.ReleaseDate.Get()
	}
	if o.RuntimeMins.IsSet() {
		toSerialize["runtimeMins"] = o.RuntimeMins.Get()
	}
	if o.RuntimeStr.IsSet() {
		toSerialize["runtimeStr"] = o.RuntimeStr.Get()
	}
	if o.Plot.IsSet() {
		toSerialize["plot"] = o.Plot.Get()
	}
	if o.PlotLocal.IsSet() {
		toSerialize["plotLocal"] = o.PlotLocal.Get()
	}
	if o.PlotLocalIsRtl != nil {
		toSerialize["plotLocalIsRtl"] = o.PlotLocalIsRtl
	}
	if o.Awards.IsSet() {
		toSerialize["awards"] = o.Awards.Get()
	}
	if o.Directors.IsSet() {
		toSerialize["directors"] = o.Directors.Get()
	}
	if o.DirectorList != nil {
		toSerialize["directorList"] = o.DirectorList
	}
	if o.Writers.IsSet() {
		toSerialize["writers"] = o.Writers.Get()
	}
	if o.WriterList != nil {
		toSerialize["writerList"] = o.WriterList
	}
	if o.Stars.IsSet() {
		toSerialize["stars"] = o.Stars.Get()
	}
	if o.StarList != nil {
		toSerialize["starList"] = o.StarList
	}
	if o.ActorList != nil {
		toSerialize["actorList"] = o.ActorList
	}
	if o.FullCast != nil {
		toSerialize["fullCast"] = o.FullCast
	}
	if o.Genres.IsSet() {
		toSerialize["genres"] = o.Genres.Get()
	}
	if o.GenreList != nil {
		toSerialize["genreList"] = o.GenreList
	}
	if o.Companies.IsSet() {
		toSerialize["companies"] = o.Companies.Get()
	}
	if o.CompanyList != nil {
		toSerialize["companyList"] = o.CompanyList
	}
	if o.Countries.IsSet() {
		toSerialize["countries"] = o.Countries.Get()
	}
	if o.CountryList != nil {
		toSerialize["countryList"] = o.CountryList
	}
	if o.Languages.IsSet() {
		toSerialize["languages"] = o.Languages.Get()
	}
	if o.LanguageList != nil {
		toSerialize["languageList"] = o.LanguageList
	}
	if o.ContentRating.IsSet() {
		toSerialize["contentRating"] = o.ContentRating.Get()
	}
	if o.ImDbRating.IsSet() {
		toSerialize["imDbRating"] = o.ImDbRating.Get()
	}
	if o.ImDbRatingVotes.IsSet() {
		toSerialize["imDbRatingVotes"] = o.ImDbRatingVotes.Get()
	}
	if o.MetacriticRating.IsSet() {
		toSerialize["metacriticRating"] = o.MetacriticRating.Get()
	}
	if o.Ratings != nil {
		toSerialize["ratings"] = o.Ratings
	}
	if o.Wikipedia != nil {
		toSerialize["wikipedia"] = o.Wikipedia
	}
	if o.Posters != nil {
		toSerialize["posters"] = o.Posters
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.Trailer != nil {
		toSerialize["trailer"] = o.Trailer
	}
	if o.BoxOffice != nil {
		toSerialize["boxOffice"] = o.BoxOffice
	}
	if o.Tagline.IsSet() {
		toSerialize["tagline"] = o.Tagline.Get()
	}
	if o.Keywords.IsSet() {
		toSerialize["keywords"] = o.Keywords.Get()
	}
	if o.KeywordList != nil {
		toSerialize["keywordList"] = o.KeywordList
	}
	if o.Similars != nil {
		toSerialize["similars"] = o.Similars
	}
	if o.TvSeriesInfo != nil {
		toSerialize["tvSeriesInfo"] = o.TvSeriesInfo
	}
	if o.TvEpisodeInfo != nil {
		toSerialize["tvEpisodeInfo"] = o.TvEpisodeInfo
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTitleData struct {
	value *TitleData
	isSet bool
}

func (v NullableTitleData) Get() *TitleData {
	return v.value
}

func (v *NullableTitleData) Set(val *TitleData) {
	v.value = val
	v.isSet = true
}

func (v NullableTitleData) IsSet() bool {
	return v.isSet
}

func (v *NullableTitleData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTitleData(val *TitleData) *NullableTitleData {
	return &NullableTitleData{value: val, isSet: true}
}

func (v NullableTitleData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTitleData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


