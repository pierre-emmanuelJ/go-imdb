/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Top250Data struct for Top250Data
type Top250Data struct {
	Items []Top250DataDetail `json:"items,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewTop250Data instantiates a new Top250Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTop250Data() *Top250Data {
	this := Top250Data{}
	return &this
}

// NewTop250DataWithDefaults instantiates a new Top250Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTop250DataWithDefaults() *Top250Data {
	this := Top250Data{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Top250Data) GetItems() []Top250DataDetail {
	if o == nil {
		var ret []Top250DataDetail
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Top250Data) GetItemsOk() ([]Top250DataDetail, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Top250Data) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Top250DataDetail and assigns it to the Items field.
func (o *Top250Data) SetItems(v []Top250DataDetail) {
	o.Items = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Top250Data) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Top250Data) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *Top250Data) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *Top250Data) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *Top250Data) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *Top250Data) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o Top250Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTop250Data struct {
	value *Top250Data
	isSet bool
}

func (v NullableTop250Data) Get() *Top250Data {
	return v.value
}

func (v *NullableTop250Data) Set(val *Top250Data) {
	v.value = val
	v.isSet = true
}

func (v NullableTop250Data) IsSet() bool {
	return v.isSet
}

func (v *NullableTop250Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTop250Data(val *Top250Data) *NullableTop250Data {
	return &NullableTop250Data{value: val, isSet: true}
}

func (v NullableTop250Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTop250Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


