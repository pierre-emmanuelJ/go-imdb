/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UsageData struct for UsageData
type UsageData struct {
	Count *int32 `json:"count,omitempty"`
	Maximum *int32 `json:"maximum,omitempty"`
	Account NullableString `json:"account,omitempty"`
	ExpireDate NullableString `json:"expireDate,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewUsageData instantiates a new UsageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageData() *UsageData {
	this := UsageData{}
	return &this
}

// NewUsageDataWithDefaults instantiates a new UsageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageDataWithDefaults() *UsageData {
	this := UsageData{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *UsageData) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageData) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *UsageData) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *UsageData) SetCount(v int32) {
	o.Count = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *UsageData) GetMaximum() int32 {
	if o == nil || o.Maximum == nil {
		var ret int32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageData) GetMaximumOk() (*int32, bool) {
	if o == nil || o.Maximum == nil {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *UsageData) HasMaximum() bool {
	if o != nil && o.Maximum != nil {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given int32 and assigns it to the Maximum field.
func (o *UsageData) SetMaximum(v int32) {
	o.Maximum = &v
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageData) GetAccount() string {
	if o == nil || o.Account.Get() == nil {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageData) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *UsageData) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *UsageData) SetAccount(v string) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *UsageData) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *UsageData) UnsetAccount() {
	o.Account.Unset()
}

// GetExpireDate returns the ExpireDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageData) GetExpireDate() string {
	if o == nil || o.ExpireDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpireDate.Get()
}

// GetExpireDateOk returns a tuple with the ExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageData) GetExpireDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireDate.Get(), o.ExpireDate.IsSet()
}

// HasExpireDate returns a boolean if a field has been set.
func (o *UsageData) HasExpireDate() bool {
	if o != nil && o.ExpireDate.IsSet() {
		return true
	}

	return false
}

// SetExpireDate gets a reference to the given NullableString and assigns it to the ExpireDate field.
func (o *UsageData) SetExpireDate(v string) {
	o.ExpireDate.Set(&v)
}
// SetExpireDateNil sets the value for ExpireDate to be an explicit nil
func (o *UsageData) SetExpireDateNil() {
	o.ExpireDate.Set(nil)
}

// UnsetExpireDate ensures that no value is present for ExpireDate, not even an explicit nil
func (o *UsageData) UnsetExpireDate() {
	o.ExpireDate.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *UsageData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *UsageData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *UsageData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *UsageData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o UsageData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Maximum != nil {
		toSerialize["maximum"] = o.Maximum
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.ExpireDate.IsSet() {
		toSerialize["expireDate"] = o.ExpireDate.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUsageData struct {
	value *UsageData
	isSet bool
}

func (v NullableUsageData) Get() *UsageData {
	return v.value
}

func (v *NullableUsageData) Set(val *UsageData) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageData) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageData(val *UsageData) *NullableUsageData {
	return &NullableUsageData{value: val, isSet: true}
}

func (v NullableUsageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


