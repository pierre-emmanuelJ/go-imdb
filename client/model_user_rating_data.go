/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserRatingData struct for UserRatingData
type UserRatingData struct {
	ImDbId NullableString `json:"imDbId,omitempty"`
	Title NullableString `json:"title,omitempty"`
	FullTitle NullableString `json:"fullTitle,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Year NullableString `json:"year,omitempty"`
	TotalRating NullableString `json:"totalRating,omitempty"`
	TotalRatingVotes NullableString `json:"totalRatingVotes,omitempty"`
	Ratings []UserRatingDataDetail `json:"ratings,omitempty"`
	DemographicAll *UserRatingDataDemographic `json:"demographicAll,omitempty"`
	DemographicMales *UserRatingDataDemographic `json:"demographicMales,omitempty"`
	DemographicFemales *UserRatingDataDemographic `json:"demographicFemales,omitempty"`
	Top1000Voters *UserRatingDataDemographicDetail `json:"top1000Voters,omitempty"`
	UsUsers *UserRatingDataDemographicDetail `json:"usUsers,omitempty"`
	NonUSUsers *UserRatingDataDemographicDetail `json:"nonUSUsers,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewUserRatingData instantiates a new UserRatingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRatingData() *UserRatingData {
	this := UserRatingData{}
	return &this
}

// NewUserRatingDataWithDefaults instantiates a new UserRatingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRatingDataWithDefaults() *UserRatingData {
	this := UserRatingData{}
	return &this
}

// GetImDbId returns the ImDbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetImDbId() string {
	if o == nil || o.ImDbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbId.Get()
}

// GetImDbIdOk returns a tuple with the ImDbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetImDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbId.Get(), o.ImDbId.IsSet()
}

// HasImDbId returns a boolean if a field has been set.
func (o *UserRatingData) HasImDbId() bool {
	if o != nil && o.ImDbId.IsSet() {
		return true
	}

	return false
}

// SetImDbId gets a reference to the given NullableString and assigns it to the ImDbId field.
func (o *UserRatingData) SetImDbId(v string) {
	o.ImDbId.Set(&v)
}
// SetImDbIdNil sets the value for ImDbId to be an explicit nil
func (o *UserRatingData) SetImDbIdNil() {
	o.ImDbId.Set(nil)
}

// UnsetImDbId ensures that no value is present for ImDbId, not even an explicit nil
func (o *UserRatingData) UnsetImDbId() {
	o.ImDbId.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *UserRatingData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *UserRatingData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *UserRatingData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *UserRatingData) UnsetTitle() {
	o.Title.Unset()
}

// GetFullTitle returns the FullTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetFullTitle() string {
	if o == nil || o.FullTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullTitle.Get()
}

// GetFullTitleOk returns a tuple with the FullTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetFullTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTitle.Get(), o.FullTitle.IsSet()
}

// HasFullTitle returns a boolean if a field has been set.
func (o *UserRatingData) HasFullTitle() bool {
	if o != nil && o.FullTitle.IsSet() {
		return true
	}

	return false
}

// SetFullTitle gets a reference to the given NullableString and assigns it to the FullTitle field.
func (o *UserRatingData) SetFullTitle(v string) {
	o.FullTitle.Set(&v)
}
// SetFullTitleNil sets the value for FullTitle to be an explicit nil
func (o *UserRatingData) SetFullTitleNil() {
	o.FullTitle.Set(nil)
}

// UnsetFullTitle ensures that no value is present for FullTitle, not even an explicit nil
func (o *UserRatingData) UnsetFullTitle() {
	o.FullTitle.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *UserRatingData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *UserRatingData) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *UserRatingData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *UserRatingData) UnsetType() {
	o.Type.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetYear() string {
	if o == nil || o.Year.Get() == nil {
		var ret string
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *UserRatingData) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableString and assigns it to the Year field.
func (o *UserRatingData) SetYear(v string) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *UserRatingData) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *UserRatingData) UnsetYear() {
	o.Year.Unset()
}

// GetTotalRating returns the TotalRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetTotalRating() string {
	if o == nil || o.TotalRating.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalRating.Get()
}

// GetTotalRatingOk returns a tuple with the TotalRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetTotalRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalRating.Get(), o.TotalRating.IsSet()
}

// HasTotalRating returns a boolean if a field has been set.
func (o *UserRatingData) HasTotalRating() bool {
	if o != nil && o.TotalRating.IsSet() {
		return true
	}

	return false
}

// SetTotalRating gets a reference to the given NullableString and assigns it to the TotalRating field.
func (o *UserRatingData) SetTotalRating(v string) {
	o.TotalRating.Set(&v)
}
// SetTotalRatingNil sets the value for TotalRating to be an explicit nil
func (o *UserRatingData) SetTotalRatingNil() {
	o.TotalRating.Set(nil)
}

// UnsetTotalRating ensures that no value is present for TotalRating, not even an explicit nil
func (o *UserRatingData) UnsetTotalRating() {
	o.TotalRating.Unset()
}

// GetTotalRatingVotes returns the TotalRatingVotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetTotalRatingVotes() string {
	if o == nil || o.TotalRatingVotes.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalRatingVotes.Get()
}

// GetTotalRatingVotesOk returns a tuple with the TotalRatingVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetTotalRatingVotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalRatingVotes.Get(), o.TotalRatingVotes.IsSet()
}

// HasTotalRatingVotes returns a boolean if a field has been set.
func (o *UserRatingData) HasTotalRatingVotes() bool {
	if o != nil && o.TotalRatingVotes.IsSet() {
		return true
	}

	return false
}

// SetTotalRatingVotes gets a reference to the given NullableString and assigns it to the TotalRatingVotes field.
func (o *UserRatingData) SetTotalRatingVotes(v string) {
	o.TotalRatingVotes.Set(&v)
}
// SetTotalRatingVotesNil sets the value for TotalRatingVotes to be an explicit nil
func (o *UserRatingData) SetTotalRatingVotesNil() {
	o.TotalRatingVotes.Set(nil)
}

// UnsetTotalRatingVotes ensures that no value is present for TotalRatingVotes, not even an explicit nil
func (o *UserRatingData) UnsetTotalRatingVotes() {
	o.TotalRatingVotes.Unset()
}

// GetRatings returns the Ratings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetRatings() []UserRatingDataDetail {
	if o == nil {
		var ret []UserRatingDataDetail
		return ret
	}
	return o.Ratings
}

// GetRatingsOk returns a tuple with the Ratings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetRatingsOk() ([]UserRatingDataDetail, bool) {
	if o == nil || o.Ratings == nil {
		return nil, false
	}
	return o.Ratings, true
}

// HasRatings returns a boolean if a field has been set.
func (o *UserRatingData) HasRatings() bool {
	if o != nil && o.Ratings != nil {
		return true
	}

	return false
}

// SetRatings gets a reference to the given []UserRatingDataDetail and assigns it to the Ratings field.
func (o *UserRatingData) SetRatings(v []UserRatingDataDetail) {
	o.Ratings = v
}

// GetDemographicAll returns the DemographicAll field value if set, zero value otherwise.
func (o *UserRatingData) GetDemographicAll() UserRatingDataDemographic {
	if o == nil || o.DemographicAll == nil {
		var ret UserRatingDataDemographic
		return ret
	}
	return *o.DemographicAll
}

// GetDemographicAllOk returns a tuple with the DemographicAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingData) GetDemographicAllOk() (*UserRatingDataDemographic, bool) {
	if o == nil || o.DemographicAll == nil {
		return nil, false
	}
	return o.DemographicAll, true
}

// HasDemographicAll returns a boolean if a field has been set.
func (o *UserRatingData) HasDemographicAll() bool {
	if o != nil && o.DemographicAll != nil {
		return true
	}

	return false
}

// SetDemographicAll gets a reference to the given UserRatingDataDemographic and assigns it to the DemographicAll field.
func (o *UserRatingData) SetDemographicAll(v UserRatingDataDemographic) {
	o.DemographicAll = &v
}

// GetDemographicMales returns the DemographicMales field value if set, zero value otherwise.
func (o *UserRatingData) GetDemographicMales() UserRatingDataDemographic {
	if o == nil || o.DemographicMales == nil {
		var ret UserRatingDataDemographic
		return ret
	}
	return *o.DemographicMales
}

// GetDemographicMalesOk returns a tuple with the DemographicMales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingData) GetDemographicMalesOk() (*UserRatingDataDemographic, bool) {
	if o == nil || o.DemographicMales == nil {
		return nil, false
	}
	return o.DemographicMales, true
}

// HasDemographicMales returns a boolean if a field has been set.
func (o *UserRatingData) HasDemographicMales() bool {
	if o != nil && o.DemographicMales != nil {
		return true
	}

	return false
}

// SetDemographicMales gets a reference to the given UserRatingDataDemographic and assigns it to the DemographicMales field.
func (o *UserRatingData) SetDemographicMales(v UserRatingDataDemographic) {
	o.DemographicMales = &v
}

// GetDemographicFemales returns the DemographicFemales field value if set, zero value otherwise.
func (o *UserRatingData) GetDemographicFemales() UserRatingDataDemographic {
	if o == nil || o.DemographicFemales == nil {
		var ret UserRatingDataDemographic
		return ret
	}
	return *o.DemographicFemales
}

// GetDemographicFemalesOk returns a tuple with the DemographicFemales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingData) GetDemographicFemalesOk() (*UserRatingDataDemographic, bool) {
	if o == nil || o.DemographicFemales == nil {
		return nil, false
	}
	return o.DemographicFemales, true
}

// HasDemographicFemales returns a boolean if a field has been set.
func (o *UserRatingData) HasDemographicFemales() bool {
	if o != nil && o.DemographicFemales != nil {
		return true
	}

	return false
}

// SetDemographicFemales gets a reference to the given UserRatingDataDemographic and assigns it to the DemographicFemales field.
func (o *UserRatingData) SetDemographicFemales(v UserRatingDataDemographic) {
	o.DemographicFemales = &v
}

// GetTop1000Voters returns the Top1000Voters field value if set, zero value otherwise.
func (o *UserRatingData) GetTop1000Voters() UserRatingDataDemographicDetail {
	if o == nil || o.Top1000Voters == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.Top1000Voters
}

// GetTop1000VotersOk returns a tuple with the Top1000Voters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingData) GetTop1000VotersOk() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.Top1000Voters == nil {
		return nil, false
	}
	return o.Top1000Voters, true
}

// HasTop1000Voters returns a boolean if a field has been set.
func (o *UserRatingData) HasTop1000Voters() bool {
	if o != nil && o.Top1000Voters != nil {
		return true
	}

	return false
}

// SetTop1000Voters gets a reference to the given UserRatingDataDemographicDetail and assigns it to the Top1000Voters field.
func (o *UserRatingData) SetTop1000Voters(v UserRatingDataDemographicDetail) {
	o.Top1000Voters = &v
}

// GetUsUsers returns the UsUsers field value if set, zero value otherwise.
func (o *UserRatingData) GetUsUsers() UserRatingDataDemographicDetail {
	if o == nil || o.UsUsers == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.UsUsers
}

// GetUsUsersOk returns a tuple with the UsUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingData) GetUsUsersOk() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.UsUsers == nil {
		return nil, false
	}
	return o.UsUsers, true
}

// HasUsUsers returns a boolean if a field has been set.
func (o *UserRatingData) HasUsUsers() bool {
	if o != nil && o.UsUsers != nil {
		return true
	}

	return false
}

// SetUsUsers gets a reference to the given UserRatingDataDemographicDetail and assigns it to the UsUsers field.
func (o *UserRatingData) SetUsUsers(v UserRatingDataDemographicDetail) {
	o.UsUsers = &v
}

// GetNonUSUsers returns the NonUSUsers field value if set, zero value otherwise.
func (o *UserRatingData) GetNonUSUsers() UserRatingDataDemographicDetail {
	if o == nil || o.NonUSUsers == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.NonUSUsers
}

// GetNonUSUsersOk returns a tuple with the NonUSUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingData) GetNonUSUsersOk() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.NonUSUsers == nil {
		return nil, false
	}
	return o.NonUSUsers, true
}

// HasNonUSUsers returns a boolean if a field has been set.
func (o *UserRatingData) HasNonUSUsers() bool {
	if o != nil && o.NonUSUsers != nil {
		return true
	}

	return false
}

// SetNonUSUsers gets a reference to the given UserRatingDataDemographicDetail and assigns it to the NonUSUsers field.
func (o *UserRatingData) SetNonUSUsers(v UserRatingDataDemographicDetail) {
	o.NonUSUsers = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserRatingData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserRatingData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *UserRatingData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *UserRatingData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *UserRatingData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *UserRatingData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o UserRatingData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImDbId.IsSet() {
		toSerialize["imDbId"] = o.ImDbId.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.FullTitle.IsSet() {
		toSerialize["fullTitle"] = o.FullTitle.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.TotalRating.IsSet() {
		toSerialize["totalRating"] = o.TotalRating.Get()
	}
	if o.TotalRatingVotes.IsSet() {
		toSerialize["totalRatingVotes"] = o.TotalRatingVotes.Get()
	}
	if o.Ratings != nil {
		toSerialize["ratings"] = o.Ratings
	}
	if o.DemographicAll != nil {
		toSerialize["demographicAll"] = o.DemographicAll
	}
	if o.DemographicMales != nil {
		toSerialize["demographicMales"] = o.DemographicMales
	}
	if o.DemographicFemales != nil {
		toSerialize["demographicFemales"] = o.DemographicFemales
	}
	if o.Top1000Voters != nil {
		toSerialize["top1000Voters"] = o.Top1000Voters
	}
	if o.UsUsers != nil {
		toSerialize["usUsers"] = o.UsUsers
	}
	if o.NonUSUsers != nil {
		toSerialize["nonUSUsers"] = o.NonUSUsers
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserRatingData struct {
	value *UserRatingData
	isSet bool
}

func (v NullableUserRatingData) Get() *UserRatingData {
	return v.value
}

func (v *NullableUserRatingData) Set(val *UserRatingData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRatingData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRatingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRatingData(val *UserRatingData) *NullableUserRatingData {
	return &NullableUserRatingData{value: val, isSet: true}
}

func (v NullableUserRatingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRatingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


