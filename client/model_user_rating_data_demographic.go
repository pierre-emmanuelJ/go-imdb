/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserRatingDataDemographic struct for UserRatingDataDemographic
type UserRatingDataDemographic struct {
	AllAges *UserRatingDataDemographicDetail `json:"allAges,omitempty"`
	AgesUnder18 *UserRatingDataDemographicDetail `json:"agesUnder18,omitempty"`
	Ages18To29 *UserRatingDataDemographicDetail `json:"ages18To29,omitempty"`
	Ages30To44 *UserRatingDataDemographicDetail `json:"ages30To44,omitempty"`
	AgesOver45 *UserRatingDataDemographicDetail `json:"agesOver45,omitempty"`
}

// NewUserRatingDataDemographic instantiates a new UserRatingDataDemographic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRatingDataDemographic() *UserRatingDataDemographic {
	this := UserRatingDataDemographic{}
	return &this
}

// NewUserRatingDataDemographicWithDefaults instantiates a new UserRatingDataDemographic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRatingDataDemographicWithDefaults() *UserRatingDataDemographic {
	this := UserRatingDataDemographic{}
	return &this
}

// GetAllAges returns the AllAges field value if set, zero value otherwise.
func (o *UserRatingDataDemographic) GetAllAges() UserRatingDataDemographicDetail {
	if o == nil || o.AllAges == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.AllAges
}

// GetAllAgesOk returns a tuple with the AllAges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingDataDemographic) GetAllAgesOk() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.AllAges == nil {
		return nil, false
	}
	return o.AllAges, true
}

// HasAllAges returns a boolean if a field has been set.
func (o *UserRatingDataDemographic) HasAllAges() bool {
	if o != nil && o.AllAges != nil {
		return true
	}

	return false
}

// SetAllAges gets a reference to the given UserRatingDataDemographicDetail and assigns it to the AllAges field.
func (o *UserRatingDataDemographic) SetAllAges(v UserRatingDataDemographicDetail) {
	o.AllAges = &v
}

// GetAgesUnder18 returns the AgesUnder18 field value if set, zero value otherwise.
func (o *UserRatingDataDemographic) GetAgesUnder18() UserRatingDataDemographicDetail {
	if o == nil || o.AgesUnder18 == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.AgesUnder18
}

// GetAgesUnder18Ok returns a tuple with the AgesUnder18 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingDataDemographic) GetAgesUnder18Ok() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.AgesUnder18 == nil {
		return nil, false
	}
	return o.AgesUnder18, true
}

// HasAgesUnder18 returns a boolean if a field has been set.
func (o *UserRatingDataDemographic) HasAgesUnder18() bool {
	if o != nil && o.AgesUnder18 != nil {
		return true
	}

	return false
}

// SetAgesUnder18 gets a reference to the given UserRatingDataDemographicDetail and assigns it to the AgesUnder18 field.
func (o *UserRatingDataDemographic) SetAgesUnder18(v UserRatingDataDemographicDetail) {
	o.AgesUnder18 = &v
}

// GetAges18To29 returns the Ages18To29 field value if set, zero value otherwise.
func (o *UserRatingDataDemographic) GetAges18To29() UserRatingDataDemographicDetail {
	if o == nil || o.Ages18To29 == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.Ages18To29
}

// GetAges18To29Ok returns a tuple with the Ages18To29 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingDataDemographic) GetAges18To29Ok() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.Ages18To29 == nil {
		return nil, false
	}
	return o.Ages18To29, true
}

// HasAges18To29 returns a boolean if a field has been set.
func (o *UserRatingDataDemographic) HasAges18To29() bool {
	if o != nil && o.Ages18To29 != nil {
		return true
	}

	return false
}

// SetAges18To29 gets a reference to the given UserRatingDataDemographicDetail and assigns it to the Ages18To29 field.
func (o *UserRatingDataDemographic) SetAges18To29(v UserRatingDataDemographicDetail) {
	o.Ages18To29 = &v
}

// GetAges30To44 returns the Ages30To44 field value if set, zero value otherwise.
func (o *UserRatingDataDemographic) GetAges30To44() UserRatingDataDemographicDetail {
	if o == nil || o.Ages30To44 == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.Ages30To44
}

// GetAges30To44Ok returns a tuple with the Ages30To44 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingDataDemographic) GetAges30To44Ok() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.Ages30To44 == nil {
		return nil, false
	}
	return o.Ages30To44, true
}

// HasAges30To44 returns a boolean if a field has been set.
func (o *UserRatingDataDemographic) HasAges30To44() bool {
	if o != nil && o.Ages30To44 != nil {
		return true
	}

	return false
}

// SetAges30To44 gets a reference to the given UserRatingDataDemographicDetail and assigns it to the Ages30To44 field.
func (o *UserRatingDataDemographic) SetAges30To44(v UserRatingDataDemographicDetail) {
	o.Ages30To44 = &v
}

// GetAgesOver45 returns the AgesOver45 field value if set, zero value otherwise.
func (o *UserRatingDataDemographic) GetAgesOver45() UserRatingDataDemographicDetail {
	if o == nil || o.AgesOver45 == nil {
		var ret UserRatingDataDemographicDetail
		return ret
	}
	return *o.AgesOver45
}

// GetAgesOver45Ok returns a tuple with the AgesOver45 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRatingDataDemographic) GetAgesOver45Ok() (*UserRatingDataDemographicDetail, bool) {
	if o == nil || o.AgesOver45 == nil {
		return nil, false
	}
	return o.AgesOver45, true
}

// HasAgesOver45 returns a boolean if a field has been set.
func (o *UserRatingDataDemographic) HasAgesOver45() bool {
	if o != nil && o.AgesOver45 != nil {
		return true
	}

	return false
}

// SetAgesOver45 gets a reference to the given UserRatingDataDemographicDetail and assigns it to the AgesOver45 field.
func (o *UserRatingDataDemographic) SetAgesOver45(v UserRatingDataDemographicDetail) {
	o.AgesOver45 = &v
}

func (o UserRatingDataDemographic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllAges != nil {
		toSerialize["allAges"] = o.AllAges
	}
	if o.AgesUnder18 != nil {
		toSerialize["agesUnder18"] = o.AgesUnder18
	}
	if o.Ages18To29 != nil {
		toSerialize["ages18To29"] = o.Ages18To29
	}
	if o.Ages30To44 != nil {
		toSerialize["ages30To44"] = o.Ages30To44
	}
	if o.AgesOver45 != nil {
		toSerialize["agesOver45"] = o.AgesOver45
	}
	return json.Marshal(toSerialize)
}

type NullableUserRatingDataDemographic struct {
	value *UserRatingDataDemographic
	isSet bool
}

func (v NullableUserRatingDataDemographic) Get() *UserRatingDataDemographic {
	return v.value
}

func (v *NullableUserRatingDataDemographic) Set(val *UserRatingDataDemographic) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRatingDataDemographic) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRatingDataDemographic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRatingDataDemographic(val *UserRatingDataDemographic) *NullableUserRatingDataDemographic {
	return &NullableUserRatingDataDemographic{value: val, isSet: true}
}

func (v NullableUserRatingDataDemographic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRatingDataDemographic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


