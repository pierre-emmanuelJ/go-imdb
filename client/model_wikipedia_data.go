/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// WikipediaData struct for WikipediaData
type WikipediaData struct {
	ImDbId NullableString `json:"imDbId,omitempty"`
	Title NullableString `json:"title,omitempty"`
	FullTitle NullableString `json:"fullTitle,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Year NullableString `json:"year,omitempty"`
	Language NullableString `json:"language,omitempty"`
	TitleInLanguage NullableString `json:"titleInLanguage,omitempty"`
	Url NullableString `json:"url,omitempty"`
	PlotShort *WikipediaDataPlot `json:"plotShort,omitempty"`
	PlotFull *WikipediaDataPlot `json:"plotFull,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewWikipediaData instantiates a new WikipediaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikipediaData() *WikipediaData {
	this := WikipediaData{}
	return &this
}

// NewWikipediaDataWithDefaults instantiates a new WikipediaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikipediaDataWithDefaults() *WikipediaData {
	this := WikipediaData{}
	return &this
}

// GetImDbId returns the ImDbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetImDbId() string {
	if o == nil || o.ImDbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbId.Get()
}

// GetImDbIdOk returns a tuple with the ImDbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetImDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbId.Get(), o.ImDbId.IsSet()
}

// HasImDbId returns a boolean if a field has been set.
func (o *WikipediaData) HasImDbId() bool {
	if o != nil && o.ImDbId.IsSet() {
		return true
	}

	return false
}

// SetImDbId gets a reference to the given NullableString and assigns it to the ImDbId field.
func (o *WikipediaData) SetImDbId(v string) {
	o.ImDbId.Set(&v)
}
// SetImDbIdNil sets the value for ImDbId to be an explicit nil
func (o *WikipediaData) SetImDbIdNil() {
	o.ImDbId.Set(nil)
}

// UnsetImDbId ensures that no value is present for ImDbId, not even an explicit nil
func (o *WikipediaData) UnsetImDbId() {
	o.ImDbId.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *WikipediaData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *WikipediaData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *WikipediaData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *WikipediaData) UnsetTitle() {
	o.Title.Unset()
}

// GetFullTitle returns the FullTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetFullTitle() string {
	if o == nil || o.FullTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullTitle.Get()
}

// GetFullTitleOk returns a tuple with the FullTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetFullTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTitle.Get(), o.FullTitle.IsSet()
}

// HasFullTitle returns a boolean if a field has been set.
func (o *WikipediaData) HasFullTitle() bool {
	if o != nil && o.FullTitle.IsSet() {
		return true
	}

	return false
}

// SetFullTitle gets a reference to the given NullableString and assigns it to the FullTitle field.
func (o *WikipediaData) SetFullTitle(v string) {
	o.FullTitle.Set(&v)
}
// SetFullTitleNil sets the value for FullTitle to be an explicit nil
func (o *WikipediaData) SetFullTitleNil() {
	o.FullTitle.Set(nil)
}

// UnsetFullTitle ensures that no value is present for FullTitle, not even an explicit nil
func (o *WikipediaData) UnsetFullTitle() {
	o.FullTitle.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *WikipediaData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *WikipediaData) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *WikipediaData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *WikipediaData) UnsetType() {
	o.Type.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetYear() string {
	if o == nil || o.Year.Get() == nil {
		var ret string
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *WikipediaData) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableString and assigns it to the Year field.
func (o *WikipediaData) SetYear(v string) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *WikipediaData) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *WikipediaData) UnsetYear() {
	o.Year.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetLanguage() string {
	if o == nil || o.Language.Get() == nil {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *WikipediaData) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *WikipediaData) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *WikipediaData) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *WikipediaData) UnsetLanguage() {
	o.Language.Unset()
}

// GetTitleInLanguage returns the TitleInLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetTitleInLanguage() string {
	if o == nil || o.TitleInLanguage.Get() == nil {
		var ret string
		return ret
	}
	return *o.TitleInLanguage.Get()
}

// GetTitleInLanguageOk returns a tuple with the TitleInLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetTitleInLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TitleInLanguage.Get(), o.TitleInLanguage.IsSet()
}

// HasTitleInLanguage returns a boolean if a field has been set.
func (o *WikipediaData) HasTitleInLanguage() bool {
	if o != nil && o.TitleInLanguage.IsSet() {
		return true
	}

	return false
}

// SetTitleInLanguage gets a reference to the given NullableString and assigns it to the TitleInLanguage field.
func (o *WikipediaData) SetTitleInLanguage(v string) {
	o.TitleInLanguage.Set(&v)
}
// SetTitleInLanguageNil sets the value for TitleInLanguage to be an explicit nil
func (o *WikipediaData) SetTitleInLanguageNil() {
	o.TitleInLanguage.Set(nil)
}

// UnsetTitleInLanguage ensures that no value is present for TitleInLanguage, not even an explicit nil
func (o *WikipediaData) UnsetTitleInLanguage() {
	o.TitleInLanguage.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *WikipediaData) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *WikipediaData) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *WikipediaData) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *WikipediaData) UnsetUrl() {
	o.Url.Unset()
}

// GetPlotShort returns the PlotShort field value if set, zero value otherwise.
func (o *WikipediaData) GetPlotShort() WikipediaDataPlot {
	if o == nil || o.PlotShort == nil {
		var ret WikipediaDataPlot
		return ret
	}
	return *o.PlotShort
}

// GetPlotShortOk returns a tuple with the PlotShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikipediaData) GetPlotShortOk() (*WikipediaDataPlot, bool) {
	if o == nil || o.PlotShort == nil {
		return nil, false
	}
	return o.PlotShort, true
}

// HasPlotShort returns a boolean if a field has been set.
func (o *WikipediaData) HasPlotShort() bool {
	if o != nil && o.PlotShort != nil {
		return true
	}

	return false
}

// SetPlotShort gets a reference to the given WikipediaDataPlot and assigns it to the PlotShort field.
func (o *WikipediaData) SetPlotShort(v WikipediaDataPlot) {
	o.PlotShort = &v
}

// GetPlotFull returns the PlotFull field value if set, zero value otherwise.
func (o *WikipediaData) GetPlotFull() WikipediaDataPlot {
	if o == nil || o.PlotFull == nil {
		var ret WikipediaDataPlot
		return ret
	}
	return *o.PlotFull
}

// GetPlotFullOk returns a tuple with the PlotFull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikipediaData) GetPlotFullOk() (*WikipediaDataPlot, bool) {
	if o == nil || o.PlotFull == nil {
		return nil, false
	}
	return o.PlotFull, true
}

// HasPlotFull returns a boolean if a field has been set.
func (o *WikipediaData) HasPlotFull() bool {
	if o != nil && o.PlotFull != nil {
		return true
	}

	return false
}

// SetPlotFull gets a reference to the given WikipediaDataPlot and assigns it to the PlotFull field.
func (o *WikipediaData) SetPlotFull(v WikipediaDataPlot) {
	o.PlotFull = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikipediaData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikipediaData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *WikipediaData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *WikipediaData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *WikipediaData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *WikipediaData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o WikipediaData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImDbId.IsSet() {
		toSerialize["imDbId"] = o.ImDbId.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.FullTitle.IsSet() {
		toSerialize["fullTitle"] = o.FullTitle.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if o.TitleInLanguage.IsSet() {
		toSerialize["titleInLanguage"] = o.TitleInLanguage.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.PlotShort != nil {
		toSerialize["plotShort"] = o.PlotShort
	}
	if o.PlotFull != nil {
		toSerialize["plotFull"] = o.PlotFull
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableWikipediaData struct {
	value *WikipediaData
	isSet bool
}

func (v NullableWikipediaData) Get() *WikipediaData {
	return v.value
}

func (v *NullableWikipediaData) Set(val *WikipediaData) {
	v.value = val
	v.isSet = true
}

func (v NullableWikipediaData) IsSet() bool {
	return v.isSet
}

func (v *NullableWikipediaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikipediaData(val *WikipediaData) *NullableWikipediaData {
	return &NullableWikipediaData{value: val, isSet: true}
}

func (v NullableWikipediaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikipediaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


