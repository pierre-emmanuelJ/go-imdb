/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// YouTubeData struct for YouTubeData
type YouTubeData struct {
	VideoId string `json:"videoId"`
	Title NullableString `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Duration NullableString `json:"duration,omitempty"`
	UploadDate NullableString `json:"uploadDate,omitempty"`
	Image NullableString `json:"image,omitempty"`
	Videos []YouTubeDataItem `json:"videos,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewYouTubeData instantiates a new YouTubeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYouTubeData(videoId string) *YouTubeData {
	this := YouTubeData{}
	this.VideoId = videoId
	return &this
}

// NewYouTubeDataWithDefaults instantiates a new YouTubeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYouTubeDataWithDefaults() *YouTubeData {
	this := YouTubeData{}
	return &this
}

// GetVideoId returns the VideoId field value
func (o *YouTubeData) GetVideoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value
// and a boolean to check if the value has been set.
func (o *YouTubeData) GetVideoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoId, true
}

// SetVideoId sets field value
func (o *YouTubeData) SetVideoId(v string) {
	o.VideoId = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *YouTubeData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *YouTubeData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *YouTubeData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *YouTubeData) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *YouTubeData) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *YouTubeData) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *YouTubeData) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *YouTubeData) UnsetDescription() {
	o.Description.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetDuration() string {
	if o == nil || o.Duration.Get() == nil {
		var ret string
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *YouTubeData) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableString and assigns it to the Duration field.
func (o *YouTubeData) SetDuration(v string) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *YouTubeData) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *YouTubeData) UnsetDuration() {
	o.Duration.Unset()
}

// GetUploadDate returns the UploadDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetUploadDate() string {
	if o == nil || o.UploadDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.UploadDate.Get()
}

// GetUploadDateOk returns a tuple with the UploadDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetUploadDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UploadDate.Get(), o.UploadDate.IsSet()
}

// HasUploadDate returns a boolean if a field has been set.
func (o *YouTubeData) HasUploadDate() bool {
	if o != nil && o.UploadDate.IsSet() {
		return true
	}

	return false
}

// SetUploadDate gets a reference to the given NullableString and assigns it to the UploadDate field.
func (o *YouTubeData) SetUploadDate(v string) {
	o.UploadDate.Set(&v)
}
// SetUploadDateNil sets the value for UploadDate to be an explicit nil
func (o *YouTubeData) SetUploadDateNil() {
	o.UploadDate.Set(nil)
}

// UnsetUploadDate ensures that no value is present for UploadDate, not even an explicit nil
func (o *YouTubeData) UnsetUploadDate() {
	o.UploadDate.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetImage() string {
	if o == nil || o.Image.Get() == nil {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *YouTubeData) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *YouTubeData) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *YouTubeData) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *YouTubeData) UnsetImage() {
	o.Image.Unset()
}

// GetVideos returns the Videos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetVideos() []YouTubeDataItem {
	if o == nil {
		var ret []YouTubeDataItem
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetVideosOk() ([]YouTubeDataItem, bool) {
	if o == nil || o.Videos == nil {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *YouTubeData) HasVideos() bool {
	if o != nil && o.Videos != nil {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []YouTubeDataItem and assigns it to the Videos field.
func (o *YouTubeData) SetVideos(v []YouTubeDataItem) {
	o.Videos = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *YouTubeData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *YouTubeData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *YouTubeData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *YouTubeData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o YouTubeData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["videoId"] = o.VideoId
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.UploadDate.IsSet() {
		toSerialize["uploadDate"] = o.UploadDate.Get()
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.Videos != nil {
		toSerialize["videos"] = o.Videos
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableYouTubeData struct {
	value *YouTubeData
	isSet bool
}

func (v NullableYouTubeData) Get() *YouTubeData {
	return v.value
}

func (v *NullableYouTubeData) Set(val *YouTubeData) {
	v.value = val
	v.isSet = true
}

func (v NullableYouTubeData) IsSet() bool {
	return v.isSet
}

func (v *NullableYouTubeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYouTubeData(val *YouTubeData) *NullableYouTubeData {
	return &NullableYouTubeData{value: val, isSet: true}
}

func (v NullableYouTubeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYouTubeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


