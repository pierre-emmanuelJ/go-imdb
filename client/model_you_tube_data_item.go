/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// YouTubeDataItem struct for YouTubeDataItem
type YouTubeDataItem struct {
	Quality NullableString `json:"quality,omitempty"`
	MimeType NullableString `json:"mimeType,omitempty"`
	Extension NullableString `json:"extension,omitempty"`
	Url NullableString `json:"url,omitempty"`
}

// NewYouTubeDataItem instantiates a new YouTubeDataItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYouTubeDataItem() *YouTubeDataItem {
	this := YouTubeDataItem{}
	return &this
}

// NewYouTubeDataItemWithDefaults instantiates a new YouTubeDataItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYouTubeDataItemWithDefaults() *YouTubeDataItem {
	this := YouTubeDataItem{}
	return &this
}

// GetQuality returns the Quality field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeDataItem) GetQuality() string {
	if o == nil || o.Quality.Get() == nil {
		var ret string
		return ret
	}
	return *o.Quality.Get()
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeDataItem) GetQualityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quality.Get(), o.Quality.IsSet()
}

// HasQuality returns a boolean if a field has been set.
func (o *YouTubeDataItem) HasQuality() bool {
	if o != nil && o.Quality.IsSet() {
		return true
	}

	return false
}

// SetQuality gets a reference to the given NullableString and assigns it to the Quality field.
func (o *YouTubeDataItem) SetQuality(v string) {
	o.Quality.Set(&v)
}
// SetQualityNil sets the value for Quality to be an explicit nil
func (o *YouTubeDataItem) SetQualityNil() {
	o.Quality.Set(nil)
}

// UnsetQuality ensures that no value is present for Quality, not even an explicit nil
func (o *YouTubeDataItem) UnsetQuality() {
	o.Quality.Unset()
}

// GetMimeType returns the MimeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeDataItem) GetMimeType() string {
	if o == nil || o.MimeType.Get() == nil {
		var ret string
		return ret
	}
	return *o.MimeType.Get()
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeDataItem) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MimeType.Get(), o.MimeType.IsSet()
}

// HasMimeType returns a boolean if a field has been set.
func (o *YouTubeDataItem) HasMimeType() bool {
	if o != nil && o.MimeType.IsSet() {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given NullableString and assigns it to the MimeType field.
func (o *YouTubeDataItem) SetMimeType(v string) {
	o.MimeType.Set(&v)
}
// SetMimeTypeNil sets the value for MimeType to be an explicit nil
func (o *YouTubeDataItem) SetMimeTypeNil() {
	o.MimeType.Set(nil)
}

// UnsetMimeType ensures that no value is present for MimeType, not even an explicit nil
func (o *YouTubeDataItem) UnsetMimeType() {
	o.MimeType.Unset()
}

// GetExtension returns the Extension field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeDataItem) GetExtension() string {
	if o == nil || o.Extension.Get() == nil {
		var ret string
		return ret
	}
	return *o.Extension.Get()
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeDataItem) GetExtensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extension.Get(), o.Extension.IsSet()
}

// HasExtension returns a boolean if a field has been set.
func (o *YouTubeDataItem) HasExtension() bool {
	if o != nil && o.Extension.IsSet() {
		return true
	}

	return false
}

// SetExtension gets a reference to the given NullableString and assigns it to the Extension field.
func (o *YouTubeDataItem) SetExtension(v string) {
	o.Extension.Set(&v)
}
// SetExtensionNil sets the value for Extension to be an explicit nil
func (o *YouTubeDataItem) SetExtensionNil() {
	o.Extension.Set(nil)
}

// UnsetExtension ensures that no value is present for Extension, not even an explicit nil
func (o *YouTubeDataItem) UnsetExtension() {
	o.Extension.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeDataItem) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeDataItem) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *YouTubeDataItem) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *YouTubeDataItem) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *YouTubeDataItem) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *YouTubeDataItem) UnsetUrl() {
	o.Url.Unset()
}

func (o YouTubeDataItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Quality.IsSet() {
		toSerialize["quality"] = o.Quality.Get()
	}
	if o.MimeType.IsSet() {
		toSerialize["mimeType"] = o.MimeType.Get()
	}
	if o.Extension.IsSet() {
		toSerialize["extension"] = o.Extension.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableYouTubeDataItem struct {
	value *YouTubeDataItem
	isSet bool
}

func (v NullableYouTubeDataItem) Get() *YouTubeDataItem {
	return v.value
}

func (v *NullableYouTubeDataItem) Set(val *YouTubeDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableYouTubeDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableYouTubeDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYouTubeDataItem(val *YouTubeDataItem) *NullableYouTubeDataItem {
	return &NullableYouTubeDataItem{value: val, isSet: true}
}

func (v NullableYouTubeDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYouTubeDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


