/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// YouTubePlaylistData struct for YouTubePlaylistData
type YouTubePlaylistData struct {
	Title NullableString `json:"title,omitempty"`
	Auhtor NullableString `json:"auhtor,omitempty"`
	Videos []YouTubePlaylistDataItem `json:"videos,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewYouTubePlaylistData instantiates a new YouTubePlaylistData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYouTubePlaylistData() *YouTubePlaylistData {
	this := YouTubePlaylistData{}
	return &this
}

// NewYouTubePlaylistDataWithDefaults instantiates a new YouTubePlaylistData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYouTubePlaylistDataWithDefaults() *YouTubePlaylistData {
	this := YouTubePlaylistData{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubePlaylistData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubePlaylistData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *YouTubePlaylistData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *YouTubePlaylistData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *YouTubePlaylistData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *YouTubePlaylistData) UnsetTitle() {
	o.Title.Unset()
}

// GetAuhtor returns the Auhtor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubePlaylistData) GetAuhtor() string {
	if o == nil || o.Auhtor.Get() == nil {
		var ret string
		return ret
	}
	return *o.Auhtor.Get()
}

// GetAuhtorOk returns a tuple with the Auhtor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubePlaylistData) GetAuhtorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Auhtor.Get(), o.Auhtor.IsSet()
}

// HasAuhtor returns a boolean if a field has been set.
func (o *YouTubePlaylistData) HasAuhtor() bool {
	if o != nil && o.Auhtor.IsSet() {
		return true
	}

	return false
}

// SetAuhtor gets a reference to the given NullableString and assigns it to the Auhtor field.
func (o *YouTubePlaylistData) SetAuhtor(v string) {
	o.Auhtor.Set(&v)
}
// SetAuhtorNil sets the value for Auhtor to be an explicit nil
func (o *YouTubePlaylistData) SetAuhtorNil() {
	o.Auhtor.Set(nil)
}

// UnsetAuhtor ensures that no value is present for Auhtor, not even an explicit nil
func (o *YouTubePlaylistData) UnsetAuhtor() {
	o.Auhtor.Unset()
}

// GetVideos returns the Videos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubePlaylistData) GetVideos() []YouTubePlaylistDataItem {
	if o == nil {
		var ret []YouTubePlaylistDataItem
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubePlaylistData) GetVideosOk() ([]YouTubePlaylistDataItem, bool) {
	if o == nil || o.Videos == nil {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *YouTubePlaylistData) HasVideos() bool {
	if o != nil && o.Videos != nil {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []YouTubePlaylistDataItem and assigns it to the Videos field.
func (o *YouTubePlaylistData) SetVideos(v []YouTubePlaylistDataItem) {
	o.Videos = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubePlaylistData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubePlaylistData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *YouTubePlaylistData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *YouTubePlaylistData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *YouTubePlaylistData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *YouTubePlaylistData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o YouTubePlaylistData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Auhtor.IsSet() {
		toSerialize["auhtor"] = o.Auhtor.Get()
	}
	if o.Videos != nil {
		toSerialize["videos"] = o.Videos
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableYouTubePlaylistData struct {
	value *YouTubePlaylistData
	isSet bool
}

func (v NullableYouTubePlaylistData) Get() *YouTubePlaylistData {
	return v.value
}

func (v *NullableYouTubePlaylistData) Set(val *YouTubePlaylistData) {
	v.value = val
	v.isSet = true
}

func (v NullableYouTubePlaylistData) IsSet() bool {
	return v.isSet
}

func (v *NullableYouTubePlaylistData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYouTubePlaylistData(val *YouTubePlaylistData) *NullableYouTubePlaylistData {
	return &NullableYouTubePlaylistData{value: val, isSet: true}
}

func (v NullableYouTubePlaylistData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYouTubePlaylistData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


