/*
IMDb-API

The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>

API version: 1.8.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// YouTubeTrailerData struct for YouTubeTrailerData
type YouTubeTrailerData struct {
	ImDbId NullableString `json:"imDbId,omitempty"`
	Title NullableString `json:"title,omitempty"`
	FullTitle NullableString `json:"fullTitle,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Year NullableString `json:"year,omitempty"`
	VideoId NullableString `json:"videoId,omitempty"`
	VideoUrl NullableString `json:"videoUrl,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewYouTubeTrailerData instantiates a new YouTubeTrailerData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYouTubeTrailerData() *YouTubeTrailerData {
	this := YouTubeTrailerData{}
	return &this
}

// NewYouTubeTrailerDataWithDefaults instantiates a new YouTubeTrailerData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYouTubeTrailerDataWithDefaults() *YouTubeTrailerData {
	this := YouTubeTrailerData{}
	return &this
}

// GetImDbId returns the ImDbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetImDbId() string {
	if o == nil || o.ImDbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImDbId.Get()
}

// GetImDbIdOk returns a tuple with the ImDbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetImDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImDbId.Get(), o.ImDbId.IsSet()
}

// HasImDbId returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasImDbId() bool {
	if o != nil && o.ImDbId.IsSet() {
		return true
	}

	return false
}

// SetImDbId gets a reference to the given NullableString and assigns it to the ImDbId field.
func (o *YouTubeTrailerData) SetImDbId(v string) {
	o.ImDbId.Set(&v)
}
// SetImDbIdNil sets the value for ImDbId to be an explicit nil
func (o *YouTubeTrailerData) SetImDbIdNil() {
	o.ImDbId.Set(nil)
}

// UnsetImDbId ensures that no value is present for ImDbId, not even an explicit nil
func (o *YouTubeTrailerData) UnsetImDbId() {
	o.ImDbId.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *YouTubeTrailerData) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *YouTubeTrailerData) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *YouTubeTrailerData) UnsetTitle() {
	o.Title.Unset()
}

// GetFullTitle returns the FullTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetFullTitle() string {
	if o == nil || o.FullTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullTitle.Get()
}

// GetFullTitleOk returns a tuple with the FullTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetFullTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTitle.Get(), o.FullTitle.IsSet()
}

// HasFullTitle returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasFullTitle() bool {
	if o != nil && o.FullTitle.IsSet() {
		return true
	}

	return false
}

// SetFullTitle gets a reference to the given NullableString and assigns it to the FullTitle field.
func (o *YouTubeTrailerData) SetFullTitle(v string) {
	o.FullTitle.Set(&v)
}
// SetFullTitleNil sets the value for FullTitle to be an explicit nil
func (o *YouTubeTrailerData) SetFullTitleNil() {
	o.FullTitle.Set(nil)
}

// UnsetFullTitle ensures that no value is present for FullTitle, not even an explicit nil
func (o *YouTubeTrailerData) UnsetFullTitle() {
	o.FullTitle.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *YouTubeTrailerData) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *YouTubeTrailerData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *YouTubeTrailerData) UnsetType() {
	o.Type.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetYear() string {
	if o == nil || o.Year.Get() == nil {
		var ret string
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableString and assigns it to the Year field.
func (o *YouTubeTrailerData) SetYear(v string) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *YouTubeTrailerData) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *YouTubeTrailerData) UnsetYear() {
	o.Year.Unset()
}

// GetVideoId returns the VideoId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetVideoId() string {
	if o == nil || o.VideoId.Get() == nil {
		var ret string
		return ret
	}
	return *o.VideoId.Get()
}

// GetVideoIdOk returns a tuple with the VideoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetVideoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VideoId.Get(), o.VideoId.IsSet()
}

// HasVideoId returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasVideoId() bool {
	if o != nil && o.VideoId.IsSet() {
		return true
	}

	return false
}

// SetVideoId gets a reference to the given NullableString and assigns it to the VideoId field.
func (o *YouTubeTrailerData) SetVideoId(v string) {
	o.VideoId.Set(&v)
}
// SetVideoIdNil sets the value for VideoId to be an explicit nil
func (o *YouTubeTrailerData) SetVideoIdNil() {
	o.VideoId.Set(nil)
}

// UnsetVideoId ensures that no value is present for VideoId, not even an explicit nil
func (o *YouTubeTrailerData) UnsetVideoId() {
	o.VideoId.Unset()
}

// GetVideoUrl returns the VideoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetVideoUrl() string {
	if o == nil || o.VideoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.VideoUrl.Get()
}

// GetVideoUrlOk returns a tuple with the VideoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetVideoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VideoUrl.Get(), o.VideoUrl.IsSet()
}

// HasVideoUrl returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasVideoUrl() bool {
	if o != nil && o.VideoUrl.IsSet() {
		return true
	}

	return false
}

// SetVideoUrl gets a reference to the given NullableString and assigns it to the VideoUrl field.
func (o *YouTubeTrailerData) SetVideoUrl(v string) {
	o.VideoUrl.Set(&v)
}
// SetVideoUrlNil sets the value for VideoUrl to be an explicit nil
func (o *YouTubeTrailerData) SetVideoUrlNil() {
	o.VideoUrl.Set(nil)
}

// UnsetVideoUrl ensures that no value is present for VideoUrl, not even an explicit nil
func (o *YouTubeTrailerData) UnsetVideoUrl() {
	o.VideoUrl.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YouTubeTrailerData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YouTubeTrailerData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *YouTubeTrailerData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *YouTubeTrailerData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *YouTubeTrailerData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *YouTubeTrailerData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o YouTubeTrailerData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImDbId.IsSet() {
		toSerialize["imDbId"] = o.ImDbId.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.FullTitle.IsSet() {
		toSerialize["fullTitle"] = o.FullTitle.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.VideoId.IsSet() {
		toSerialize["videoId"] = o.VideoId.Get()
	}
	if o.VideoUrl.IsSet() {
		toSerialize["videoUrl"] = o.VideoUrl.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableYouTubeTrailerData struct {
	value *YouTubeTrailerData
	isSet bool
}

func (v NullableYouTubeTrailerData) Get() *YouTubeTrailerData {
	return v.value
}

func (v *NullableYouTubeTrailerData) Set(val *YouTubeTrailerData) {
	v.value = val
	v.isSet = true
}

func (v NullableYouTubeTrailerData) IsSet() bool {
	return v.isSet
}

func (v *NullableYouTubeTrailerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYouTubeTrailerData(val *YouTubeTrailerData) *NullableYouTubeTrailerData {
	return &NullableYouTubeTrailerData{value: val, isSet: true}
}

func (v NullableYouTubeTrailerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYouTubeTrailerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


